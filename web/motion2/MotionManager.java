/*
 * MotionManager.java
 *
 * Created on den 28 september 2004, 17:06
 */
import java.awt.*;
import javax.media.*;
import javax.swing.border.*;
import java.io.*;

/**
 * Motion Manager. This is the managing application of our Motion Detection suite,
 * it can handle four remote RTP streams sent by MotionDetector applications running
 * on other machines.
 *
 * @author  Jan Lindblom <linjan-1@student.luth.se>
 */
public class MotionManager extends javax.swing.JFrame implements javax.media.ControllerListener {
    private Object waitSync = new Object();
    private Player[] player = new Player[4];
    private int cPlayer = 0;
    private boolean stateTransitionOK = true;
    
    /** Creates new form MotionManager */
    public MotionManager() {
        initComponents();
    }
    
    /**
     * Block until the processor has transitioned to the given state.
     * Return false if the transition failed.
     *
     * Copied from TestMotionDetection.java, located on 
     * http://darnok.com/programming/motion-detection/,
     * written by Konrad Rzeszutek.
     *
     * @param state the wanted state for the processor
     */
    boolean waitForState(int state) {
        // waits for a state confirmation for the player
	synchronized (waitSync) {
	    try {
		while (player[cPlayer].getState() != state && stateTransitionOK)
		    waitSync.wait();
	    } catch (Exception e) {}
	}
	return stateTransitionOK;
    }
    
     /** The update method for this ControllerListener, sets he proper actions
     * when updated.
     *
     * @param event the occured event
     */
    public void controllerUpdate(ControllerEvent event) {
   
        // if the playeris dead - we leave 
	if (player == null)
	    return;
  
        if ( event instanceof ConfigureCompleteEvent ||
	     event instanceof RealizeCompleteEvent   ||
	     event instanceof PrefetchCompleteEvent ) {
	    synchronized ( waitSync ) {
		stateTransitionOK = true;
		waitSync.notifyAll();
	    }
	} else if ( event instanceof ResourceUnavailableEvent ) {
	    synchronized ( waitSync ) {
		stateTransitionOK = false;
		waitSync.notifyAll();
	    }
        // close the application
	} else if ( event instanceof EndOfMediaEvent       ||
                    event instanceof ControllerClosedEvent ||
                    event instanceof ControllerErrorEvent ) {
	    player[cPlayer].close();
	    System.exit(0);  
	}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        mainPanel = new javax.swing.JPanel();
        scrollPanel = new javax.swing.JScrollPane();
        streamPanel = new javax.swing.JPanel();
        controlPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ipField = new javax.swing.JTextField();
        portField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();

        setTitle("Motion Manager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.Y_AXIS));

        mainPanel.setMaximumSize(new java.awt.Dimension(32767, 1200));
        mainPanel.setPreferredSize(new java.awt.Dimension(400, 330));
        scrollPanel.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        streamPanel.setPreferredSize(new java.awt.Dimension(320, 240));
        scrollPanel.setViewportView(streamPanel);

        mainPanel.add(scrollPanel);

        controlPanel.setLayout(new java.awt.GridLayout(2, 2, 5, 0));

        controlPanel.setMaximumSize(new java.awt.Dimension(32767, 100));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("IP address");
        controlPanel.add(jLabel1);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Port");
        controlPanel.add(jLabel2);

        jLabel3.setText(" ");
        controlPanel.add(jLabel3);

        ipField.setText("aaa.bbb.ccc.ddd");
        ipField.setToolTipText("Enter IP address of streaming Motion Detector");
        controlPanel.add(ipField);

        portField.setText("2400");
        portField.setToolTipText("Enter Port number of streaming Motion Detector");
        portField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portFieldActionPerformed(evt);
            }
        });

        controlPanel.add(portField);

        addButton.setText("Add Stream");
        addButton.setToolTipText("Add Stream session to main window");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        controlPanel.add(addButton);

        mainPanel.add(controlPanel);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String url= "rtp://" + ipField.getText() + ":" + portField.getText() + "/video";
        System.out.println(url);
        MediaLocator mrl= new MediaLocator(url);
         
         if (mrl == null) {
             System.err.println("Can't build MRL for RTP");
             System.exit(0);
         }
        try {
             player[cPlayer] = Manager.createPlayer(mrl);
             
             player[cPlayer].addControllerListener( this );
             
             player[cPlayer].prefetch();
             if ( !waitForState( player[cPlayer].Prefetched ) ) {
                 System.err.println("Failed to configure the processor.ipAddress");
                 System.exit(0);
             }    
             
             Component vc;
             if ((vc = player[cPlayer].getVisualComponent()) != null) {
                 streamPanel.setSize(streamPanel.getSize().width+320, streamPanel.getSize().height);
                 streamPanel.add(vc);
             }
             
             if (player[cPlayer] != null) {
                 player[cPlayer].start();
             }
             if (cPlayer != 3)
                 cPlayer++;
        } catch (NoPlayerException e) {
            System.err.println("Error:" + e);
             System.exit(0);
         } catch (IOException e) {
             System.err.println("Error:" + e);
             System.exit(0);
         }
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void portFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portFieldActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_portFieldActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /** Main class, this starts the MotionManager application.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new MotionManager().show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JTextField ipField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField portField;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JPanel streamPanel;
    // End of variables declaration//GEN-END:variables
    
}
