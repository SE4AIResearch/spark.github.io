#VRML V2.0 utf8

# Eng 477 Illustration: Light Sources in  VRML
# K.-P. Beier, University of Michigan
# Last Update: November 12, 2000

##################################################
# Begin Navigation

Viewpoint {description "Reset View" position 0 0 9}

DEF HL NavigationInfo {
	type ["EXAMINE" "ANY"]
	headlight FALSE
}

# End Navigation
##################################################


##################################################
# Begin of Prototype ControlButton

PROTO ControlButton [
      	 field  SFNode  fcolor  Color {color [1 1 0]}
	exposedField  SFInt32 flag    -1		#    0    = show on indicator
								# 1 or -1 = hide on indicator
]{
Transform {
	children [

		Shape { geometry IndexedFaceSet {			# front face
			coord Coordinate { point [ 0.06  0.00  0,
							   0.00  0.06  0,
							  -0.06  0.00  0,
							   0.00 -0.06  0 ] }
			coordIndex [ 0 1 2 3 -1 ]
			colorPerVertex FALSE
			color IS fcolor
		}}

		Shape { geometry IndexedFaceSet {			# back face
			coord Coordinate { point [ 0.08  0.00 -0.001,
							   0.00  0.08 -0.001,
							  -0.08  0.00 -0.001,
							   0.00 -0.08 -0.001 ] }
			coordIndex [ 0 1 2 3 -1 ]
			colorPerVertex FALSE
			color Color { color [ 0 0 0 ] }
		}}

		Switch { whichChoice IS flag choice [
			Shape { geometry IndexedFaceSet {		# on indicator
				coord Coordinate { point [ 0.08  0.08 -0.002,
								  -0.08  0.08 -0.002,
								  -0.08 -0.08 -0.002,
								   0.08 -0.08 -0.002 ] }
				coordIndex [ 0 1 2 3 -1 ]
				colorPerVertex FALSE
				color Color { color [ 1 1 1 ] }
				colorIndex [ 0 ]
			}}
		]}

	]
}}

# End of Prototype ControlButton
##################################################


##################################################
# Begin of Prototype Arrow
# start at origin, pointing in negative z direction

PROTO Arrow [
	field SFRotation	rot	1 0 0 0
	field SFVec3f	scl	1 1 1
]{
Transform { rotation IS rot children [
	Transform { rotation 1 0 0 -1.57 translation 0 0 -0.5 scale IS scl
		children [
			Shape {
				appearance DEF EMISS Appearance {
					material Material { emissiveColor 0.6 0.6 0.6 }
				}
				geometry Cylinder { radius 0.015 height 1 }
			}
			Transform {translation 0 0.5 0 children [
				Shape {
				appearance USE EMISS
				geometry Cone { bottomRadius 0.08 height 0.2 }
				}
			]}
		]
	}
]}}

# End of Prototype Arrow
##################################################


##################################################
# Begin of Prototype LightCone
# start at origin, opening in negative z direction

PROTO LightCone [
	field SFVec3f size 1 1 1  # size[0]&[1]: radius at end; size[2]: length
	field SFColor emis 0.5 0.5 0.5	# emissiveColor
	field SFFloat trans 0.5			# transparency
]{
Transform { scale IS size children [
	Shape {
		appearance Appearance {
			material Material {
				emissiveColor IS emis
				transparency IS trans
			}
		}
		geometry Extrusion {
			creaseAngle 1.57
			beginCap FALSE
			endCap FALSE
			solid  FALSE
			crossSection [  1.00  0.00,   0.92 -0.38,
					    0.71 -0.71,   0.38 -0.92,
					    0.00 -1.00,  -0.38 -0.92,
					   -0.71 -0.71,  -0.92 -0.38,
					   -1.00 -0.00,  -0.92  0.38,
					   -0.71  0.71,  -0.38  0.92,
					    0.00  1.00,   0.38  0.92,
					    0.71  0.71,   0.92  0.38,
					    1.00  0.00 ]
			spine [ 0.0 0.0 0.0, 0.0 0.0 -1 ]
			scale [ 0.0 0.0, 1 1 ]
		}
	}
]}}

# End of Prototype LightCone
##################################################


##################################################
# Begin of Scene

DEF DRAGME SphereSensor { }			# drag sensor

DEF SPINME Transform { children [		# spin scene by timer

DEF DRAGTRANS Transform { children [	# drag scene by mouse

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Begin of Light Sources

DEF DL DirectionalLight { on FALSE }

DEF PL PointLight { location 0 0.65 4  on FALSE }

DEF SL1 SpotLight {
	location 0 0.5 5
	on FALSE
	beamWidth 0.25
	cutOffAngle 0.6
}

DEF SL2 SpotLight {
	location 1 0.2 5
	color 0 1 1
	on FALSE
	beamWidth 0.45
	cutOffAngle 0.45
}

# End of Light Sources
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Begin of graphical Light Source representations

# Overall "Show Light Source" Switch

DEF SLSWITCH Switch { whichChoice -1 choice [ Group { children [

##########
# Directional Light Source

DEF DLSWITCH Switch { whichChoice -1 choice [

	DEF ARRAY Group { children [
		Transform { translation -0.9  0.0 4.5 children [ Arrow {} ]}
		Transform { translation -0.3  0.0 4.5 children [ Arrow {} ]}
		Transform { translation  0.3  0.0 4.5 children [ Arrow {} ]}
		Transform { translation  0.9  0.0 4.5 children [ Arrow {} ]}
		Transform { translation -0.9  0.6 4.5 children [ Arrow {} ]}
		Transform { translation -0.3  0.6 4.5 children [ Arrow {} ]}
		Transform { translation  0.3  0.6 4.5 children [ Arrow {} ]}
		Transform { translation  0.9  0.6 4.5 children [ Arrow {} ]}
		Transform { translation -0.9 -0.6 4.5 children [ Arrow {} ]}
		Transform { translation -0.3 -0.6 4.5 children [ Arrow {} ]}
		Transform { translation  0.3 -0.6 4.5 children [ Arrow {} ]}
		Transform { translation  0.9 -0.6 4.5 children [ Arrow {} ]}
	]}

]}

##########
# Point Light Source

DEF PLSWITCH Switch { whichChoice -1 choice [

	Group { children [
		Transform { translation 0 0.65 4 children [
			Shape {
				appearance Appearance {
					material Material { emissiveColor 0.9 0.9 0.9 }
				}
				geometry Sphere { radius 0.06 }
			}
							# arrows on main axes
			Arrow {scl 0.6 0.6 0.6 }
			Arrow { rot 0 1 0  1.57  scl 0.6 0.6 0.6 }
			Arrow { rot 0 1 0 -1.57  scl 0.6 0.6 0.6 }
			Arrow { rot 1 0 0  1.57  scl 0.6 0.6 0.6 }
			Arrow { rot 1 0 0 -1.57  scl 0.6 0.6 0.6 }
			Arrow { rot 1 0 0  3.142 scl 0.6 0.6 0.6 }
							# diagonals in x-y-z planes
			#Arrow { rot 0 1 0  0.785 scl 0.6 0.6 0.6 }
			#Arrow { rot 0 1 0 -0.785 scl 0.6 0.6 0.6 }
			#Arrow { rot 1 0 0  0.785 scl 0.6 0.6 0.6 }
			#Arrow { rot 1 0 0 -0.785 scl 0.6 0.6 0.6 }
			#Arrow { rot 0 1 0  2.356 scl 0.6 0.6 0.6 }
			#Arrow { rot 0 1 0 -2.356 scl 0.6 0.6 0.6 }
			#Arrow { rot 1 0 0  2.356 scl 0.6 0.6 0.6 }
			#Arrow { rot 1 0 0 -2.356 scl 0.6 0.6 0.6 }
							# space diagonals in neg z
			Arrow { rot  1 0 1  1.57 scl 0.6 0.6 0.6 }
			Arrow { rot  1 0 1 -1.57 scl 0.6 0.6 0.6 }
			Arrow { rot -1 0 1  1.57 scl 0.6 0.6 0.6 }
			Arrow { rot -1 0 1 -1.57 scl 0.6 0.6 0.6 }
							# space diagonals in pos z
			Transform { rotation 1 0 0 3.14 children [
				Arrow { rot  1 0 1  1.57 scl 0.6 0.6 0.6 }
				Arrow { rot  1 0 1 -1.57 scl 0.6 0.6 0.6 }
				Arrow { rot -1 0 1  1.57 scl 0.6 0.6 0.6 }
				Arrow { rot -1 0 1 -1.57 scl 0.6 0.6 0.6 }
			]}
 
		]}
	]}

]}

##########
# Spot Light Source 1

DEF SL1SWITCH Switch { whichChoice -1 choice [

	Transform { translation 0 0.5 5 children [
		Shape {
			appearance Appearance {
				material Material { emissiveColor 0.8 0.8 0.8 }
			}
			geometry Sphere { radius 0.06 }
		}
		Arrow { }
		LightCone { size 0.587 0.587 2.3  trans 0.4}
		LightCone { size 1.231 1.231 1.8  trans 0.7}
	]}

]}

##########
# Spot Light Source 2

DEF SL2SWITCH Switch { whichChoice -1 choice [

	Group { children [
		Transform { translation 1 0.2 5 children [
			Shape {
				appearance Appearance {
					material Material { emissiveColor 0 1 1 }
				}
				geometry Sphere { radius 0.06 }
			}
			Arrow { }
			LightCone { size 1.111 1.111 2.3  trans 0.7  emis 0 1 1 }
		]}
	]}

]}


]}]} # End of Overall "Show Light Source" Switch

# End of graphical Light Source representations
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Begin of Object

Transform { rotation 0 0 1 1.57 children [ Shape {	# x-axis blue
	appearance Appearance {
		material Material { diffuseColor 0 0 1 }
	}
	geometry Cylinder { radius 0.07 height 5}
}]}

Shape {								# y-axis green
	appearance Appearance {
		material Material { diffuseColor 0 1 0 }
	}
	geometry Cylinder { radius 0.07 height 4}
}

Transform { rotation 1 0 0 1.57 children [ Shape {	# z-axis red
	appearance Appearance {
		material Material { diffuseColor 1 0 0 }
	}
	geometry Cylinder { radius 0.07 height 4}
}]}

Shape {								# flat box
	appearance Appearance { material Material { } }
	geometry Box {size 4.0 3.0 0.2}
}

Shape {								# sphere
	appearance Appearance {material Material { } }
	geometry Sphere {radius 1.32}
}

Shape {
	appearance Appearance {material Material { } }	# centerpiece
	geometry Extrusion {
		crossSection [ -0.5 -1.0,  -1.0 -0.5,  -1.0  0.5,
				   -0.5  1.0,   0.5  1.0,   1.0  0.5,
				    1.0 -0.5,   0.5 -1.0,  -0.5 -1.0 ]
		spine  [0 -1 0, 0 1 0 ]
		creaseAngle 1.3
	}
}

# End of Object
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

]} # end of drag scene by mouse

]} # end of spin scene by timer

# End of Scene
##################################################


##################################################
# Begin of Floating Panel

# ProximitySensor to measure the viewer's position and orientation
DEF PANELPROX ProximitySensor {size 100 100 100}

# Transform to follow the viewer and make the panel appear to be static
DEF PANELTRANS Transform { children [

#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of headlight representation

DEF HLMSWITCH Switch { whichChoice -1 choice [
	DEF HLSWITCH Switch { whichChoice -1 choice [
		Transform { translation 0 0 -9 children [ USE ARRAY ] }
	]}
]}

# End of headlight representation
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "HEADLIGHT" Button

Transform { translation -1.35 -1.9 -5  scale 1.7 1.7 1.7 children [

	DEF HLSENS TouchSensor { }					# touch sensor

	DEF HLBUT ControlButton {					# geometry
		fcolor Color { color [ 0.8 0.8 0 ] }
		flag 1
	}

	Transform { translation -0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "HEADLIGHT" ]
				fontStyle DEF LEFTSTYLE FontStyle {
					style "BOLD"
					size 0.12
					justify ["END" "MIDDLE"]
				}
			}
		}
	]}

]}

# End of "HEADLIGHT" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "DirectionalLight" Button

Transform { translation -1.55 -1.6 -5  scale 1.7 1.7 1.7 children [

	DEF DLSENS TouchSensor { }					# touch sensor

	DEF DLBUT ControlButton {					# geometry
		fcolor Color { color [ 0.8 0.8 0 ] }
		flag 1
	}

	Transform { translation -0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "DirectionalLight" ]
				fontStyle USE LEFTSTYLE
			}
		}
	]}

]}

# End of "DirectionalLight" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "PointLight" Button

Transform { translation -1.75 -1.3 -5  scale 1.7 1.7 1.7 children [

	DEF PLSENS TouchSensor { }					# touch sensor

	DEF PLBUT ControlButton {					# geometry
		fcolor Color { color [ 0.8 0.8 0 ] }
		flag 1
	}

	Transform { translation -0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "PointLight" ]
				fontStyle USE LEFTSTYLE
			}
		}
	]}

]}

# End of "PointLight" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "SpotLight 1" Button

Transform { translation -1.95 -1.0 -5  scale 1.7 1.7 1.7 children [

	DEF SL1SENS TouchSensor { }					# touch sensor

	DEF SL1BUT ControlButton {					# geometry
		fcolor Color { color [ 0.8 0.8 0 ] }
		flag 1
	}

	Transform { translation -0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "SpotLight 1" ]
				fontStyle USE LEFTSTYLE
			}
		}
	]}

]}

# End of "SpotLight 1" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "SpotLight 2" Button

Transform { translation -2.15 -0.7 -5  scale 1.7 1.7 1.7 children [

	DEF SL2SENS TouchSensor { }					# touch sensor

	DEF SL2BUT ControlButton {					# geometry
		fcolor Color { color [ 0.8 0.8 0 ] }
		flag 1
	}

	Transform { translation -0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "SpotLight 2" ]
				fontStyle USE LEFTSTYLE
			}
		}
	]}

]}

# End of "SpotLight 2" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "combine lights" Button

Transform { translation -2.33 -0.4 -5  scale 1.2 1.2 1.2 children [

	DEF COMSENS TouchSensor { }					# touch sensor

	DEF COMBUT ControlButton {					# geometry
		fcolor Color { color [ 0 0.8 0 ] }
		flag 1
	}

	Transform { translation -0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "combine lights" ]
				fontStyle USE LEFTSTYLE
			}
		}
	]}

]}

# End of "combine lights" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "Spin" Button

Transform { translation 2.6 -1.3 -5  scale 1.7 1.7 1.7 children [

	DEF SPSENS TouchSensor { }					# touch sensor

	DEF SPBUT ControlButton {					# geometry
		fcolor Color { color [ 0.8 0.25 0 ] }
		flag 1
	}

	Transform { translation 0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "Spin" ]
				fontStyle DEF RIGHTSTYLE FontStyle {
					style "BOLD"
					size 0.12
					justify ["BEGIN" "MIDDLE"]
				}
			}
		}
	]}

]}

# End of "Spin" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "Stop/Reset" Button

Transform { translation 2.2 -1.6 -5  scale 1.7 1.7 1.7 children [

	DEF RSSENS TouchSensor { }					# touch sensor

	DEF RSBUT ControlButton {					# geometry
		fcolor Color { color [ 0.8 0.25 0 ] }
		flag 1
	}

	Transform { translation 0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "Stop/Reset" ]
				fontStyle USE RIGHTSTYLE
			}
		}
	]}

]}

# End of "Stop/Reset" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "Show" Button

Transform { translation 1.6 -1.9 -5  scale 1.7 1.7 1.7 children [

	DEF SHOWSENS TouchSensor { }					# touch sensor

	DEF SHOWBUT ControlButton {					# geometry
		fcolor Color { color [ 0.8 0 0.8 ] }
		flag 1
	}

	Transform { translation 0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "Show Light Source" ]
				fontStyle USE RIGHTSTYLE
			}
		}
	]}

]}

# End of "Show" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

]}

# End of Floating Panel
##################################################


##################################################
# Begin of Interpolators and Timers

DEF SPINOI OrientationInterpolator {
	key	   [ 0 0.25 0.5 0.75 1 ]
	keyValue [0.6 1 1 0,
		    0.6 1 1 1.57,
		    0.6 1 1 3.14,
                0.6 1 1 4.71,
                0.6 1 1 0 ]
}

DEF TIME TimeSensor {
	enabled FALSE
	loop TRUE
	cycleInterval 15
}

# End of Interpolators and Timers
##################################################


##################################################
# Begin of VRML Script CONTROL

DEF CONTROL Script {
   eventIn  SFTime   hl_time
   eventOut SFInt32  hl_flag
   eventOut SFBool   hl_stat

   eventIn  SFTime   dl_time
   eventOut SFInt32  dl_flag
   eventOut SFBool   dl_stat

   eventIn  SFTime   pl_time
   eventOut SFInt32  pl_flag
   eventOut SFBool   pl_stat

   eventIn  SFTime   sl1_time
   eventOut SFInt32  sl1_flag
   eventOut SFBool   sl1_stat

   eventIn  SFTime   sl2_time
   eventOut SFInt32  sl2_flag
   eventOut SFBool   sl2_stat

   eventIn  SFTime   comb_time
   eventOut SFInt32  comb_flag

   eventIn SFTime    show_time
   eventOut SFInt32  show_flag

   field    SFInt32  hl_memo	 -1
   field    SFInt32  dl_memo   -1
   field    SFInt32  pl_memo   -1
   field    SFInt32  sl1_memo  -1
   field    SFInt32  sl2_memo  -1
   field    SFInt32  comb_memo -1
   field	SFInt32  show_memo -1

   url "vrmlscript:

	function initialize ( ) {
		hl_flag  =  -1;
		hl_stat  =  FALSE;
		dl_flag  =  -1;
		dl_stat  =  FALSE;
		pl_flag  =  -1;
		pl_stat  =  FALSE;
		sl1_flag  =  -1;
		sl1_stat  =  FALSE;
		sl2_flag  =  -1;
		sl2_stat  =  FALSE;
		comb_flag =  -1;
		show_flag = -1;
	}

	function hl_time (time, value) {
		hl_memo = hl_memo + 1;
		if (hl_memo >= 1) hl_memo = -1;
		hl_flag = hl_memo;
		if (hl_memo == -1 ) hl_stat = FALSE;
		else  hl_stat = TRUE;
		if ((hl_memo == 0) && (comb_memo == -1))
			dl_stat = FALSE,
			dl_flag = -1,
			dl_memo = -1,
			pl_stat = FALSE,
			pl_flag = -1,
			pl_memo = -1,
			sl1_stat = FALSE,
			sl1_flag = -1,
			sl1_memo = -1,
			sl2_stat = FALSE,
			sl2_flag = -1,
			sl2_memo = -1;
	}

	function dl_time (time, value) {
		dl_memo = dl_memo + 1;
		if (dl_memo >= 1) dl_memo = -1;
		dl_flag = dl_memo;
		if (dl_memo == -1 ) dl_stat = FALSE;
		else	dl_stat = TRUE;
		if ((dl_memo == 0) && (comb_memo == -1))
			hl_stat = FALSE,
			hl_flag = -1,
			hl_memo = -1,
			pl_stat = FALSE,
			pl_flag = -1,
			pl_memo = -1,
			sl1_stat = FALSE,
			sl1_flag = -1,
			sl1_memo = -1,
			sl2_stat = FALSE,
			sl2_flag = -1,
			sl2_memo = -1;
	}

	function pl_time (time, value) {
		pl_memo = pl_memo + 1;
		if (pl_memo >= 1) pl_memo = -1;
		pl_flag = pl_memo;
		if (pl_memo == -1 ) pl_stat = FALSE;
		else	pl_stat = TRUE;
		if ((pl_memo == 0) && (comb_memo == -1))
			hl_memo = -1,
			hl_stat = FALSE,
			hl_flag = -1,
			dl_stat = FALSE,
			dl_flag = -1,
			dl_memo = -1,
			sl1_stat = FALSE,
			sl1_flag = -1,
			sl1_memo = -1,
			sl2_stat = FALSE,
			sl2_flag = -1,
			sl2_memo = -1;
	}

	function sl1_time (time, value) {
		sl1_memo = sl1_memo + 1;
		if (sl1_memo >= 1) sl1_memo = -1;
		sl1_flag = sl1_memo;
		if (sl1_memo == -1 ) sl1_stat = FALSE;
		else	sl1_stat = TRUE;
		if ((sl1_memo == 0) && (comb_memo == -1))
			hl_memo = -1,
			hl_stat = FALSE,
			hl_flag = -1,
			dl_stat = FALSE,
			dl_flag = -1,
			dl_memo = -1,
			pl_stat = FALSE,
			pl_flag = -1,
			pl_memo = -1,
			sl2_stat = FALSE,
			sl2_flag = -1,
			sl2_memo = -1;
	}

	function sl2_time (time, value) {
		sl2_memo = sl2_memo + 1;
		if (sl2_memo >= 1) sl2_memo = -1;
		sl2_flag = sl2_memo;
		if (sl2_memo == -1 ) sl2_stat = FALSE;
		else	sl2_stat = TRUE;
		if ((sl2_memo == 0) && (comb_memo == -1))
			hl_memo = -1,
			hl_stat = FALSE,
			hl_flag = -1,
			dl_stat = FALSE,
			dl_flag = -1,
			dl_memo = -1,
			pl_stat = FALSE,
			pl_flag = -1,
			pl_memo = -1,
			sl1_stat = FALSE,
			sl1_flag = -1,
			sl1_memo = -1;
	}

	function comb_time (time, value) {
		comb_memo = comb_memo + 1;
		if (comb_memo >=1) comb_memo = -1;
		comb_flag = comb_memo;
		if (comb_memo == -1)
			hl_memo = -1,
			hl_stat = FALSE,
			hl_flag = -1,
			dl_stat = FALSE,
			dl_flag = -1,
			dl_memo = -1,
			pl_stat = FALSE,
			pl_flag = -1,
			pl_memo = -1,
			sl1_stat = FALSE,
			sl1_flag = -1,
			sl1_memo = -1,
			sl2_stat = FALSE,
			sl2_flag = -1,
			sl2_memo = -1; 
	}

	function show_time (time, value) {
		show_memo = show_memo + 1;
		if (show_memo >= 1) show_memo = -1;
		show_flag = show_memo;
	}

   "
}

# End of VRML Script CONTROL
##################################################


##################################################
# Begin of VRML Script SPIN

DEF SPIN Script {

   eventIn  SFTime	spin_time
   eventIn  SFTime      reset_time
   eventOut SFInt32	spin_flag
   eventOut SFBool	spin_enabled

   eventOut SFRotation	set_rot
   eventOut SFTime	startTimer

   field    SFInt32	spin_memo -1

   field	SFTime	lastStart	0
   field	SFTime	lastClick	0

   url "vrmlscript:

	function initialize () {
		spin_flag = -1;
		spin_enabled = FALSE;
		set_rot = new SFRotation (1, 1, 1, 0);
	}

	function spin_time (time, value) {
		spin_memo = spin_memo + 1;
		if (spin_memo >= 1) spin_memo = -1;
		if (spin_memo == 0) spin_flag =0,
					  spin_enabled = TRUE,
					  startTimer = time - ( lastClick - lastStart ),
					  lastStart = startTimer;
		else spin_flag = -1,
		     spin_enabled = FALSE,
		     lastClick = time;
	}

	function reset_time (time, value) {
		set_rot = new SFRotation (1, 1, 1, 0);
		spin_enabled = FALSE;
		spin_memo = -1;
		spin_flag = -1;
		lastClick = time;
		lastStart = time;
	}

   "
}

# End of VRML Script SPIN
##################################################


##################################################
# Begin of Routing Statements

# Routing for floating panel
ROUTE PANELPROX.position_changed TO PANELTRANS.translation
ROUTE PANELPROX.orientation_changed TO PANELTRANS.rotation

# Routing for headlight
ROUTE HLSENS.touchTime TO CONTROL.hl_time
ROUTE CONTROL.hl_flag TO HLBUT.flag
ROUTE CONTROL.hl_flag TO HLSWITCH.whichChoice
ROUTE CONTROL.hl_stat TO HL.headlight

# Routing for directional light
ROUTE DLSENS.touchTime TO CONTROL.dl_time
ROUTE CONTROL.dl_flag TO DLBUT.flag
ROUTE CONTROL.dl_flag TO DLSWITCH.whichChoice
ROUTE CONTROL.dl_stat TO DL.on

# Routing for point light
ROUTE PLSENS.touchTime TO CONTROL.pl_time
ROUTE CONTROL.pl_flag TO PLBUT.flag
ROUTE CONTROL.pl_flag TO PLSWITCH.whichChoice
ROUTE CONTROL.pl_stat TO PL.on

# Routing for spot light 1
ROUTE SL1SENS.touchTime TO CONTROL.sl1_time
ROUTE CONTROL.sl1_flag TO SL1BUT.flag
ROUTE CONTROL.sl1_flag TO SL1SWITCH.whichChoice
ROUTE CONTROL.sl1_stat TO SL1.on

# Routing for spot light 2
ROUTE SL2SENS.touchTime TO CONTROL.sl2_time
ROUTE CONTROL.sl2_flag TO SL2BUT.flag
ROUTE CONTROL.sl2_flag TO SL2SWITCH.whichChoice
ROUTE CONTROL.sl2_stat TO SL2.on

# Routing for combine
ROUTE COMSENS.touchTime TO CONTROL.comb_time
ROUTE CONTROL.comb_flag TO COMBUT.flag

# Routing for Show Light Source
ROUTE SHOWSENS.touchTime TO CONTROL.show_time
ROUTE CONTROL.show_flag TO SHOWBUT.flag
ROUTE CONTROL.show_flag TO SLSWITCH.whichChoice
ROUTE CONTROL.show_flag TO HLMSWITCH.whichChoice

# Routing for spin control
ROUTE SPSENS.touchTime TO SPIN.spin_time
ROUTE SPIN.spin_flag TO SPBUT.flag
ROUTE SPIN.spin_enabled TO TIME.enabled
#ROUTE SPSENS.touchTime TO TIME.startTime
ROUTE SPIN.startTimer TO TIME.startTime
ROUTE TIME.fraction_changed TO SPINOI.set_fraction
ROUTE SPINOI.value_changed TO SPINME.set_rotation

# Routing for reset
ROUTE RSSENS.touchTime TO SPIN.reset_time
ROUTE SPIN.set_rot TO SPINME.set_rotation

# Routing for manual dragging
ROUTE DRAGME.rotation_changed TO DRAGTRANS.set_rotation
ROUTE SPIN.set_rot TO DRAGTRANS.set_rotation
ROUTE SPIN.set_rot TO DRAGME.offset

# End of Routing Statements
##################################################
