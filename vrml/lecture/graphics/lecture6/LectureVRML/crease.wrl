#VRML V2.0 utf8

# Eng 477 Illustration: Crease Angle in VRML
# K.-P. Beier, University of Michigan
# Last Update: October 28, 2002

##################################################
# Begin Navigation, Background, Light

Viewpoint {
	description "Tilted View"
	position 0 15 22
	orientation 1 0 0 -0.65
}

Viewpoint { description "Front View" position 0 0 24 }

NavigationInfo { type ["EXAMINE" "ANY"] headlight FALSE}

Background { skyColor [ 0.5 0.6 1.0 ] }

DirectionalLight { direction  0.25  0   -1   intensity 0.8 }

DirectionalLight { direction -1.00 -1.0 -0.5 intensity 0.8 }

# End Navigation, Background, Light
##################################################


##################################################
# Begin of Prototype ControlButton

PROTO ControlButton [
		 field  SFNode  fcolor  Color {color [1 1 0]}
	exposedField  SFInt32 flag    -1		#    0    = show on indicator
								# 1 or -1 = hide on indicator
]{
Transform {
	children [

		Shape { geometry IndexedFaceSet {			# front face
			coord Coordinate { point [ 0.06  0.00  0,
							   0.00  0.06  0,
							  -0.06  0.00  0,
							   0.00 -0.06  0 ] }
			coordIndex [ 0 1 2 3 -1 ]
			colorPerVertex FALSE
			color IS fcolor
		}}

		Shape { geometry IndexedFaceSet {			# back face
			coord Coordinate { point [ 0.08  0.00 -0.001,
							   0.00  0.08 -0.001,
							  -0.08  0.00 -0.001,
							   0.00 -0.08 -0.001 ] }
			coordIndex [ 0 1 2 3 -1 ]
			colorPerVertex FALSE
			color Color { color [ 0 0 0 ] }
		}}

		Switch { whichChoice IS flag choice [
			Shape { geometry IndexedFaceSet {		# on indicator
				coord Coordinate { point [ 0.08  0.08 -0.002,
								  -0.08  0.08 -0.002,
								  -0.08 -0.08 -0.002,
								   0.08 -0.08 -0.002 ] }
				coordIndex [ 0 1 2 3 -1 ]
				colorPerVertex FALSE
				color Color { color [ 1 1 1 ] }
				colorIndex [ 0 ]
			}}
		]}

	]
}}

# End of Prototype ControlButton
##################################################


##################################################
# Begin of Prototype BoxObject

PROTO BoxObject [
	field SFFloat	crang 0
	field SFBool	myccw TRUE
]{
Shape {							# object
	appearance Appearance {
		#material Material { diffuseColor 0.8 0.25 0 }
		material Material {
			diffuseColor  0.7 0.7 0
			specularColor 0.3 0.3 0
			shininess 0.5
		}
	}
	geometry IndexedFaceSet {
		coord Coordinate { point [

						 3 -4  7,	# points on bottom face
						 8 -4  5,
						10 -4  0,
						 8 -4 -5,
						 3 -4 -7,
						-3 -4 -7,
						-8 -4 -5,
					     -10 -4  0,
						-8 -4  5,
						-3 -4  7,

   						 3  4  7,	# points on top face
						 8  4  5,
						10  4  0,
						 8  4 -5,
						 3  4 -7,
						-3  4 -7,
						-8  4 -5,
					     -10  4  0,
						-8  4  5,
						-3  4  7,

						 0  8  0	# point on top
		]}
		coordIndex [  9  8  7  6  5  4  3  2  1  0 -1,	# bottom face

				  0  1 11 10 -1,				# side faces
				  1  2 12 11 -1,
				  2  3 13 12 -1,
				  3  4 14 13 -1,
				  4  5 15 14 -1,
				  5  6 16 15 -1,
				  6  7 17 16 -1,
				  7  8 18 17 -1,
				  8  9 19 18 -1,
				  9  0 10 19 -1,

				 10 11 20 -1,				# top faces
				 11 12 20 -1,
				 12 13 20 -1,
				 13 14 20 -1,
				 14 15 20 -1,
				 15 16 20 -1,
				 16 17 20 -1,
				 17 18 20 -1,
				 18 19 20 -1,
				 19 10 20 -1 ]

		solid TRUE
		ccw IS myccw
		creaseAngle IS crang
	}
}}

# End of Prototype BoxObject
##################################################


##################################################
# Begin of Prototype MySphere
#
# This prototype creates a sphere of radius 'rad' with a variable
# number of polygons controlled by 'numLat' (number of latitude
# circles) and 'numLng' (number of longitude circles). The sphere
# is centered around (0,0,0).
#
# The sphere is generated as an IndexedFaceSet node by defining
# the fields coord, coordIndex, texCoord, and creaseAngle.
#
# Adapted from Carey, Bell: "The Annotated VRML 2.0 Reference
# Manual," Addison-Wesley, 1997, pp. 286-287.
# by K.-P. Beier, University of Michigan, January 27, 2002

PROTO MySphere [
	field SFFloat rad    1	# radius of sphere
	field SFInt32 numLat 4	# number of longitudes (parallel to equator)
	field SFInt32 numLng 4	# number of latitudes  (passing through poles)
	field SFFloat cra  3.14 # crease angle 
]{
DEF IFS IndexedFaceSet {
	coord DEF C Coordinate { }
	texCoord DEF TC TextureCoordinate { }
	creaseAngle IS cra
}
DEF S Script {
	field SFFloat rad IS rad
	field SFInt32 numLat IS numLat
	field SFInt32 numLng IS numLng
	eventOut MFVec3f c_changed
	eventOut MFVec2f t_changed
	eventOut MFInt32 ci_changed
	url "vrmlscript:
		function initialize () {
			var r, angle, x, y, z;
			var i, j, polyIndex;
			for (i = 0; i < numLat; i++) {
			   angle = i * ( Math.PI / (numLat-1) ) - ( 0.5 * Math.PI );
			   y = Math.sin(angle);
			   r = rad * Math.sqrt ( 1 - y*y );
			   y = y * rad;
			   for (j = 0; j < numLng; j++) {
				angle = 2 * Math.PI * j / numLng;
				x = -Math.sin(angle) * r;
				z = -Math.cos(angle) * r;
				c_changed [i*numLng+j] = new SFVec3f (x,y,z);
				t_changed [i*numLng+j] = new SFVec2f (j/numLng, i/(numLat-1));
			   }
			}
			for (i = 0; i < numLat-1; i++) {
			   for (j = 0; j < numLng; j++) {
				polyIndex = 5 *( i * numLng + j );
				ci_changed [polyIndex+0] = i * numLng + j;
				ci_changed [polyIndex+1] = i * numLng + (j+1)%numLng;
				ci_changed [polyIndex+2] = (i+1) * numLng + (j+1)%numLng;
				ci_changed [polyIndex+3] = (i+1) * numLng + j;
				ci_changed [polyIndex+4] = -1;
			   }
			}
		}
	"
}
ROUTE S.c_changed TO C.point
ROUTE S.t_changed TO TC.set_point
ROUTE S.ci_changed TO IFS.set_coordIndex
}
# End of Prototype MySphere
##################################################


##################################################
# Begin of Scene

DEF SPINME Transform { translation 0 0.3 0  rotation 0 1 0 1.57 children [

	DEF CREASE Switch { whichChoice 0 choice [

		BoxObject { crang 0.000 myccw TRUE }	# choice 0 closed -  0 dgr

		BoxObject { crang 0.436 myccw TRUE }	# choice 1 closed - 25 dgr

		BoxObject { crang 0.873 myccw TRUE }	# choice 2 closed - 50 dgr

		BoxObject { crang 1.309 myccw TRUE }	# choice 3 closed - 75 dgr

		BoxObject { crang 0.000 myccw FALSE }	# choice 0 open -  0 dgr

		BoxObject { crang 0.436 myccw FALSE }	# choice 1 open - 25 dgr

		BoxObject { crang 0.873 myccw FALSE }	# choice 2 open - 50 dgr

		BoxObject { crang 1.309 myccw FALSE }	# choice 3 open - 75 dgr

	]}

	DEF SPS Switch { whichChoice 0 choice [
		
		Shape {							# inside sphere
			appearance DEF SAP Appearance {		# coice 0 - 0 dgr
				material Material {

					# Shiny Gold
					#diffuseColor 0.46 0.5 0
					#specularColor 0.71 0.70 0.56
					#shininess 0.16
					#ambientIntensity 0.4

					# Shiny Aluminum
					diffuseColor 0.3 0.3 0.5
					specularColor 0.6 0.60 0.7
					shininess 0.08
					ambientIntensity 0.3
				}
			}
			geometry MySphere {rad 2.5 numLat 22 numLng 22 cra 0}
		}

		Shape {							# inside sphere
			appearance USE SAP				# choice 1 - 25 dgr or more
			geometry MySphere {rad 2.5 numLat 22 numLng 22 cra 0.436}
		}
	]}

	PointLight { location -3 4 2  intensity 0.25 }	# inside point light
									# (off-centered)
]}

# End of Scene 
##################################################


##################################################
# Begin of Floating Panel

# ProximitySensor to measure the viewer's position and orientation
DEF PANELPROX ProximitySensor {size 100 100 100}

# Transform to follow the viewer and make the panel appear to be static
DEF PANELTRANS Transform { children [

#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "spin" Button

Transform { translation -1.8 -0.8 -3.5  scale 1.35 1.35 1.35 children [

	DEF SPINSENS TouchSensor { }					# touch sensor

	DEF SPINBUT ControlButton {					# geometry
		fcolor Color { color [ 0.8 0.8 0 ] }
		flag 1
	}

	Transform { translation -0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "spin" ]
				fontStyle DEF LEFTSTYLE FontStyle {
					style "BOLD"
					size 0.12
					justify ["END" "MIDDLE"]
				}
			}
			appearance DEF BLACK Appearance {
				material Material { diffuseColor 0 0 0 }
			}
		}
	]}

]}

# End of "spin" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "reset/flip" Button

Transform { translation -1.4 -1.05 -3.5  scale 1.35 1.35 1.35 children [

	DEF RSPINSENS TouchSensor { enabled TRUE }		# touch sensor

	DEF BUSW Switch { whichChoice 0 choice [
		ControlButton {						# geometry (enabled)
			fcolor Color { color [ 0.8 0.8 0 ] }
			flag 1
		}
		ControlButton {						# geometry (disabled)
			fcolor Color { color [ 0.5 0.6 1.0 ] }
			flag 1
		}
	]}

	Transform { translation -0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "reset/flip" ]
				fontStyle USE LEFTSTYLE
			}
			appearance USE BLACK
		}
	]}

]}

# End of "reset/flip" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "open box" Button

Transform { translation -1 -1.3 -3.5  scale 1.35 1.35 1.35 children [

	DEF OPENSENS TouchSensor { }				# touch sensor

	DEF OPENBUT ControlButton {				# geometry
		fcolor Color { color [ 0 0.8 0 ] }
		flag 1
	}

	Transform { translation -0.11 0 0  children [	# label
		Shape {
			geometry Text {
				string [ "open box" ]
				fontStyle USE LEFTSTYLE
			}
			appearance USE BLACK
		}
	]}

]}

# End of "open box" Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of "crease angle" label

Transform { translation 1.79 -1.15 -3.5  scale 1.35 1.35 1.35 children [

	Transform { translation 0 0.14 0  children [	# label
		Shape {
			geometry Text {
				string [ "crease angle:" ]
				fontStyle DEF TOPSTYLE FontStyle {
					style "BOLD"
					size 0.12
					justify ["MIDDLE" "MIDDLE"]
				}
			}
			appearance USE BLACK
		}
	]}

]}

# End of "crease angle" label
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of Choice 0 Button

Transform { translation 1.2 -1.3 -3.5  scale 1.35 1.35 1.35 children [

	DEF C0SENS TouchSensor { }				# touch sensor

	DEF C0BUT ControlButton {				# geometry
		fcolor Color { color [ 1 0.4 0 ] }
		flag 1
	}

	Transform { translation 0 0.14 0  children [	# label
		Shape {
			geometry Text { string [ "0" ] fontStyle USE TOPSTYLE }
			appearance USE BLACK
		}
	]}

]}

# End of Choice 0 Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of Choice 1 Button

Transform { translation 1.5 -1.3 -3.5  scale 1.35 1.35 1.35 children [

	DEF C1SENS TouchSensor { }				# touch sensor

	DEF C1BUT ControlButton {				# geometry
		fcolor Color { color [ 1 0.4 0 ] }
		flag 1
	}

	Transform { translation 0 0.14 0  children [	# label
		Shape {
			geometry Text { string [ "25" ] fontStyle USE TOPSTYLE }
			appearance USE BLACK
		}
	]}

]}

# End of Choice 1 Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of Choice 2 Button

Transform { translation 1.8 -1.3 -3.5  scale 1.35 1.35 1.35 children [

	DEF C2SENS TouchSensor { }				# touch sensor

	DEF C2BUT ControlButton {				# geometry
		fcolor Color { color [ 1 0.4 0 ] }
		flag 1
	}

	Transform { translation 0 0.14 0  children [	# label
		Shape {
			geometry Text { string [ "50" ] fontStyle USE TOPSTYLE }
			appearance USE BLACK
		}
	]}

]}

# End of Choice 2 Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Begin of Choice 3 Button

Transform { translation 2.1 -1.3 -3.5  scale 1.35 1.35 1.35 children [

	DEF C3SENS TouchSensor { }				# touch sensor

	DEF C3BUT ControlButton {				# geometry
		fcolor Color { color [ 1 0.4 0 ] }
		flag 1
	}

	Transform { translation 0 0.14 0  children [	# label
		Shape {
			geometry Text { string [ "75" ] fontStyle USE TOPSTYLE }
			appearance USE BLACK
		}
	]}

]}

# End of Choice 2 Button
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

]}

# End of Floating Panel
##################################################


##################################################
# Begin of Interpolator and Timer

DEF SPIN OrientationInterpolator {
	key	   [ 0 0.25 0.5 0.75 1 ]
	keyValue [ 0 1 0 1.57,
		     0 1 0 3.14,
		     0 1 0 4.71,
		     0 1 0 0,
		     0 1 0 1.57 ]
}

DEF TIME TimeSensor {
	enabled TRUE
	loop TRUE
	cycleInterval 25
}

# End of Interpolator and Timer
##################################################


##################################################
# Begin of VRML Script SPINCONTROL

DEF SPINCONTROL Script {

   eventIn  SFTime	spin_time
   eventOut SFInt32	spin_flag
   eventOut SFBool	spin_enabled
   eventOut SFBool      reset_enabled
   eventOut SFInt32     switch_me
   eventOut SFTime	startTimer

   eventIn  SFTime   	reset_time
   eventOut SFRotation	set_rot

   field    SFInt32	spin_memo	0
   field    SFInt32	reset_memo	1

   field	SFTime	lastStop	0
   field	SFTime	lastStart	0
   field	SFTime	lastClick	0

   url "vrmlscript:

	function initialize ( ) {
		spin_flag    = 0;
		spin_enabled = TRUE;
		reset_enabled = FALSE;
		switch_me = 1;
		set_rot = new SFRotation (0, 1, 0, 1.57);
	}

	function spin_time (time, value) {
		spin_memo = spin_memo + 1;
		if (spin_memo >= 1) spin_memo = -1;
		if (spin_memo == 0) spin_flag =0,
					  spin_enabled = TRUE,
					  startTimer = time - ( lastClick - lastStart ),
					  lastStart = startTimer,
					  switch_me = 1;
		else spin_flag = -1,
		     spin_enabled = FALSE,
		     switch_me = 0,
		     reset_memo = 1,
		     lastClick = time;
		reset_enabled = !spin_enabled;
	}

	function reset_time (time, value) {
		reset_memo = reset_memo + 1;
		if (reset_memo >= 2) reset_memo = 0;
		if (reset_memo == 0) set_rot = new SFRotation (0, 1, 0, 1.57),
					   lastClick = 0,
					   lastStart = 0;
		else set_rot = new SFRotation (0, 1, 0, 3.14),
				   lastClick = lastStart + 6.25;
	}

   "

}

# End of VRML Script SPINCONTROL
##################################################


##################################################
# Begin of VRML Script MAINSW

DEF MAINSW Script {

   eventIn	SFTime	open_box
   eventOut	SFInt32	open_flag

   eventIn	SFTime	choice0
   eventOut SFInt32	flag0

   eventIn	SFTime	choice1
   eventOut	SFInt32	flag1

   eventIn	SFTime	choice2
   eventOut	SFInt32	flag2

   eventIn	SFTime	choice3
   eventOut	SFInt32	flag3

   eventOut	SFInt32	current_choice

   eventOut	SFInt32	sphere_choice

   field	SFFloat	open_stat	0
   field	SFFloat	memchoice	0

   url "vrmlscript:

	function initialize ( ) {
		open_flag = 1;
		flag0 = 0;
		flag1 = 1;
		flag2 = 1;
		flag3 = 1;
		sphere_choice = 0;
	}

	function open_box (time, value) {
		if (open_stat == 0) open_stat = 4,
					  open_flag = 0;
		else open_stat = 0,
		     open_flag = 1;
		current_choice = memchoice + open_stat;
	}

	function choice0 (time, value) {
		current_choice = 0 + open_stat;
		memchoice = 0;
		flag0 = 0;
		flag1 = 1;
		flag2 = 1;
		flag3 = 1;
		sphere_choice = 0;
	}

	function choice1 (time, value) {
		current_choice = 1 + open_stat;
		memchoice = 1;
		flag1 = 0;
		flag0 = 1;
		flag2 = 1;
		flag3 = 1;
		sphere_choice = 1;
	}

	function choice2 (time, value) {
		current_choice = 2 + open_stat;
		memchoice = 2;
		flag2 = 0;
		flag0 = 1;
		flag1 = 1;
		flag3 = 1;
		sphere_choice = 1;
	}

	function choice3 (time, value) {
		current_choice = 3 + open_stat;
		memchoice = 3;
		flag3 = 0;
		flag0 = 1;
		flag1 = 1;
		flag2 = 1;
		sphere_choice = 1;
	}

   "
}

# End of VRML Script MAINSW
##################################################


##################################################
# Begin of Routing Statements

# Routing for floating panel
ROUTE PANELPROX.position_changed TO PANELTRANS.translation
ROUTE PANELPROX.orientation_changed TO PANELTRANS.rotation

# Routing for spin control
ROUTE SPINSENS.touchTime TO SPINCONTROL.spin_time
ROUTE SPINCONTROL.spin_flag TO SPINBUT.flag
ROUTE SPINCONTROL.spin_enabled TO TIME.enabled
ROUTE SPINCONTROL.startTimer TO TIME.startTime
ROUTE TIME.fraction_changed TO SPIN.set_fraction
ROUTE SPIN.value_changed TO SPINME.set_rotation
ROUTE SPINCONTROL.reset_enabled TO RSPINSENS.enabled
ROUTE SPINCONTROL.switch_me TO BUSW.whichChoice

# Routing for reset/flip
ROUTE RSPINSENS.touchTime TO SPINCONTROL.reset_time
ROUTE SPINCONTROL.set_rot TO SPINME.set_rotation

# Routing for open box
ROUTE OPENSENS.touchTime TO MAINSW.open_box
ROUTE MAINSW.open_flag TO OPENBUT.flag

# Routing for crease angle choices
ROUTE C0SENS.touchTime TO MAINSW.choice0
ROUTE MAINSW.flag0 TO C0BUT.flag
ROUTE C1SENS.touchTime TO MAINSW.choice1
ROUTE MAINSW.flag1 TO C1BUT.flag
ROUTE C2SENS.touchTime TO MAINSW.choice2
ROUTE MAINSW.flag2 TO C2BUT.flag
ROUTE C3SENS.touchTime TO MAINSW.choice3
ROUTE MAINSW.flag3 TO C3BUT.flag
ROUTE MAINSW.current_choice TO CREASE.whichChoice
ROUTE MAINSW.sphere_choice TO SPS.whichChoice

# End of Routing Statements
##################################################
