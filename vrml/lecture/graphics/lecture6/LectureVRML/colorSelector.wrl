#VRML V2.0 utf8

# Eng 477 Illustration: RGB Color Selector
# K.-P. Beier, University of Michigan
# Last Update: October 17, 2000

##################################################
# Begin Navigation and Background

Viewpoint { position 0 0.55 2.3 }

NavigationInfo { type ["NONE"] }

DEF SKY Background { skyColor [ 0.5 0.6 1.0 ] }

# End Navigation and Background
##################################################


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#
#		DEFINITION OF PROTOTYPES
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


##################################################
# Begin of Prototype FrameControlButton

PROTO FrameControlButton [
	field SFVec3f    pos  0 0 0
      field SFNode     col  Color {color [0 0 0]}
]{
Transform {
	translation IS pos
	children [ Shape { geometry IndexedFaceSet {
		coord Coordinate {
			point [ -0.043  0.043 0.001, -0.043 -0.043 0.001,
				   0.043 -0.043 0.001,  0.043  0.043 0.001 ]
		}
		coordIndex [ 0, 1, 2, 3, -1 ]
		colorPerVertex FALSE
		color IS col
		colorIndex [ 0 ]
	}}]
}}

# End of Prototype FrameControlButton
##################################################


##################################################
# Begin of Prototype GPControlButton

PROTO GPControlButton [
      	 field  SFNode  fcolor  Color {color [1 1 0]}
	exposedField  SFInt32 flag    -1 
]{
Transform {

	children [
		Shape { geometry IndexedFaceSet {
			coord Coordinate { point [ 0.06  0.00  0,
							   0.00  0.06  0,
							  -0.06  0.00  0,
							   0.00 -0.06  0 ] }
			coordIndex [ 0 1 2 3 -1 ]
			colorPerVertex FALSE
			color IS fcolor
		}}

		Shape { geometry IndexedFaceSet {
			coord Coordinate { point [ 0.08  0.00 -0.001,
							   0.00  0.08 -0.001,
							  -0.08  0.00 -0.001,
							   0.00 -0.08 -0.001 ] }
			coordIndex [ 0 1 2 3 -1 ]
			colorPerVertex FALSE
			color Color { color [ 0 0 0 ] }
		}}

		Switch { whichChoice IS flag choice [
		Shape { geometry IndexedFaceSet {
			coord Coordinate { point [ 0.08  0.08 -0.002,
							  -0.08  0.08 -0.002,
							  -0.08 -0.08 -0.002,
							   0.08 -0.08 -0.002 ] }
			coordIndex [ 0 1 2 3 -1 ]
			colorPerVertex FALSE
			color Color { color [ 1 1 1 ] }
			colorIndex [ 0 ]
		}}
		]}
	]
}}

# End of Prototype GPControlButton
##################################################


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#
#		RGB SLIDERS AND GRAY LOCK
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


##################################################
# Begin of Red Control & Gray Lock
# (lock geometry is moved with red slider)

Transform {
	translation -1.12 -0.02 0		# overal placement of red slider
	children [

# begin of slider track & label
		DEF TRACK Shape { geometry IndexedFaceSet {	# track geometry
			coord Coordinate { point [ -0.02 -0.1 0,  0.02 -0.1 0,
							    0.02  1.1 0, -0.02  1.1 0 ]}
			coordIndex [ 0, 1, 2, 3, -1 ]
			colorPerVertex FALSE
			color Color { color [ 0 0 0 ] } colorIndex [ 0 ]
		}}
		Transform { translation 0 1.15 0 children [	# track label
			Shape { geometry DEF RTXT Text {
				string [ "0" ]
				fontStyle DEF STYLE FontStyle {
					style "BOLD"
					size 0.13
					justify "MIDDLE"
				}
			}}
		]}
# end of slider track & label

# begin of slider & gray lock
		DEF RMOVE Transform { children [
			DEF RSENSOR PlaneSensor { minPosition 0 0  maxPosition 0 1 }

			Shape { geometry IndexedFaceSet {			# slider front face
				coord DEF COO Coordinate {
					point [ -0.07  0.07  0.01,
						   0.07  0.07  0.01,
						   0.07 -0.07  0.01,
						  -0.07 -0.07  0.01 ]
				}
				coordIndex [ 0 3 2 1 -1]
				colorPerVertex FALSE
				color Color { color [ 1 0 0 ] } colorIndex [ 0 ]
			}}

			DEF BACK Shape { geometry IndexedFaceSet {	# slider back face
				coord Coordinate {
					point [ -0.085  0.085 0.008,
						   0.085  0.085 0.008,
						   0.085 -0.085 0.008,
						  -0.085 -0.085 0.008 ]
				}
				coordIndex [ 0 3 2 1 -1]
				colorPerVertex FALSE
				color Color { color [ 0 0 0 ] } colorIndex [ 0 ]
			}}

			DEF LOCKSWITCH Switch {whichChoice -1 choice [	   # gray lock switch

				Transform {translation 0.39 0 0 children [   # lock geometry

					Shape { geometry IndexedFaceSet {		# lock back face
						coord Coordinate { point [ -0.5 -0.04 0.015,
										    0.5 -0.04 0.015,
										    0.5  0.04 0.015,
										   -0.5  0.04 0.015 ]}
						coordIndex [ 0, 1, 2, 3, -1 ]
						colorPerVertex FALSE
						color Color { color [ 0 0 0 ] }
						colorIndex [ 0 ]
					}}
					Shape { geometry IndexedFaceSet {		# lock front face
						coord Coordinate { point [ -0.48 -0.02 0.016,
										    0.48 -0.02 0.016,
										    0.48  0.02 0.016,
										   -0.48  0.02 0.016 ]}
						coordIndex [ 0 1 2 3 -1 ]
						colorPerVertex FALSE
						color Color { color [ 0.5 0.5 0.5 ] }
						colorIndex [ 0 ]
					}}

				]} # end of lock geometry

			]} # end of gray lock switch

		]}
# end of slider & gray lock

	]
}

# End of Red Control & Gray Lock
##################################################


##################################################
# Begin of Green Control

Transform {
	translation -0.73 -0.02 0	# overal placement of green slider
	children [

		USE TRACK							# track geometry
		Transform { translation 0 1.15 0 children [	# track label
			Shape { geometry DEF GTXT Text {
				string [ "0" ]
				fontStyle USE STYLE
			}}
		]}

		DEF GMOVE Transform { children [			# slider front face
			DEF GSENSOR PlaneSensor { minPosition 0 0  maxPosition 0 1 }
			Shape { geometry IndexedFaceSet {
				coord USE COO coordIndex [ 0 3 2 1 -1]
				colorPerVertex FALSE
				color Color { color [ 0 1 0 ] } colorIndex [ 0 ]
			}}
			USE BACK						# slider back face	
		]}

	]
}

# End of Green Control
##################################################


##################################################
# Begin of Blue Control

Transform {
	translation -0.34 -0.02 0	# overal placement of blue slider
	children [

		USE TRACK							# track geometry
		Transform { translation 0 1.15 0 children [	# track label
			Shape { geometry DEF BTXT Text {
				string [ "0" ]
				fontStyle USE STYLE
			}}
		]}

		DEF BMOVE Transform { children [			# slider front face
			DEF BSENSOR PlaneSensor { minPosition 0 0  maxPosition 0 1 }
			Shape { geometry IndexedFaceSet {
				coord USE COO coordIndex [ 0 3 2 1 -1]
				colorPerVertex FALSE
				color Color { color [ 0 0 1 ] } colorIndex [ 0 ]
			}}
			USE BACK						# slider back face
		]}

	]
}

# End of Blue Control
##################################################


##################################################
# Begin Gray Lock Control Button

Transform { translation -0.49 1.35 0  children [

	DEF LOCKTOUCH TouchSensor { }					# touch sensor

	DEF INDIC GPControlButton {					# geometry
		fcolor Color { color [ 0.5 0.5 0.5 ] }
		flag -1
	}

	Transform { translation -0.11 0 0  children [		# label
		Shape {
			geometry Text {
				string [ "Gray Lock" ]
				fontStyle FontStyle {
					style "BOLD"
					size 0.12
					justify ["END" "MIDDLE"]
				}
			}
			appearance Appearance {
				material Material { diffuseColor 0 0 0 }
			}
		}
	]}

]}

# End of Gray Lock Control Button
##################################################


#*************************************************
#	Switch between 2D Panel and 3D Cube
DEF SWITCH Switch { whichChoice 0 choice [
#*************************************************


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#
#		2D DISPLAY PANEL
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


Group { children [	# group containing all elements of 2D Panel
				# (SWITCH: whichChoice 0)


##################################################
# Begin of Touch Sensor to Switch to 3D Cube

	Transform { translation 0.8 -0.14 0.32 children [

		DEF TO3D TouchSensor { }		# touch sensor

		Shape {					# triangle pointing to the right
			geometry IndexedFaceSet {
				coord Coordinate { point [  0.06  0.00 0,
								   -0.06  0.06 0,
								   -0.06 -0.06 0 ] }
				coordIndex [ 0 1 2 -1 ]
				colorPerVertex FALSE
				color Color { color [ 1 1 0 ] }
				colorIndex [ 0 ]
			}
		}

		Shape {					# underlying black triangle
			geometry IndexedFaceSet {
				coord Coordinate { point [  0.074  0.000 -0.001,
								   -0.070  0.072 -0.001,
								   -0.070 -0.072 -0.001 ] }
				coordIndex [ 0 1 2 -1 ]
				colorPerVertex FALSE
				color Color { color [ 0 0 0 ] }
				colorIndex [ 0 ]
			}
		}

		Shape {					# invisible face enlarging sensor area
			geometry IndexedFaceSet {
				coord Coordinate { point [ -0.075  0.075 0,
								   -0.075 -0.075 0,
								    0.260 -0.075 0,
								    0.260  0.075 0 ] }
				coordIndex [ 0 1 2 3 -1 ]
			}
			appearance Appearance {
				material Material { transparency 1 }
			}
		}

		Transform { translation 0.12 -0.035 0 children [	# label "3D"
			Shape { geometry Text {
				string [ "3D" ]
				fontStyle FontStyle {
					style "BOLD"
					size 0.13
					justify "BEGIN"
				}}
				appearance Appearance {
					material Material { diffuseColor 0 0 0 }
				}
			}
		]}

	]}

# End of Touch Sensor to Switch to 3D Cube
##################################################


##################################################
# Begin of 2D Display Panel

	Transform { translation 0.7 0.5 0 children [		# placement of 2D Panel

# begin of center face with frame

		Group{ children [ DEF TD TouchSensor { }	# touch sensor for center face

			Shape { geometry IndexedFaceSet {	# center face with current color
				coord Coordinate { point [ -0.3  0.3 0, -0.3 -0.3 0,
								    0.3 -0.3 0,  0.3  0.3 0 ] }
				coordIndex [ 0, 1, 2, 3, -1 ]
				colorPerVertex FALSE
				color DEF DISPLAY Color { color [ 0 0 0 ] }
				colorIndex [ 0 ]
			}}
		]}

		Shape { geometry IndexedFaceSet {		# frame with current frame color
			coord Coordinate { point [ -0.45  0.45 -0.01, -0.45 -0.45 -0.01,
							    0.45 -0.45 -0.01,  0.45  0.45 -0.01 ] }
			coordIndex [ 0, 1, 2, 3, -1 ]
			colorPerVertex FALSE
			color DEF BACKCOLOR Color { color [ 1 1 1 ] }
			colorIndex [ 0 ]
		}}

		Transform { translation 0.3 -0.44 0		# transparent face to set sky color
			children [
				DEF SETSKY TouchSensor { }	# touch sensor to toggle sky color
				Shape {
					geometry IndexedFaceSet {
						coord Coordinate { point [ 0.00 0.00 0.011,
										   0.14 0.00 0.011,
										   0.14 0.14 0.011,
										   0.00 0.14 0.011 ] }
						coordIndex [ 0 1 2 3 -1 ]
					}
					appearance Appearance {
						material Material { transparency 0.6 }
					}
				}
			]
		}

# end of center face with frame

# begin of frame color selectors
 
		Transform {							# placement of selector bar
			translation 0 0.6 0
			scale 1.1 1.1 1
			children [

				Transform { translation 0 0.1 0 children [	# label
					Shape { geometry Text {
						string [ "frame color" ]
						fontStyle FontStyle { size 0.12 justify "MIDDLE" }
					}}
				]}
				Shape { geometry IndexedFaceSet {		# selector bar back face
					coord Coordinate { point [ -0.4  0.05 0, -0.4 -0.05 0,
									    0.4 -0.05 0,  0.4  0.05 0 ] }
					coordIndex [ 0, 1, 2, 3, -1 ]
					colorPerVertex FALSE
					color Color { color [ 0.4 0.4 0.4 ] }
					colorIndex [ 0 ]
				}}
				Group{ children [ DEF T1 TouchSensor { }	# selector 1
					FrameControlButton {
						pos -0.35 0 0
						col Color { color [0 0 0]}
					}
				]}
				Group{ children [ DEF T2 TouchSensor { }	# selector 2
					FrameControlButton {
						pos -0.25 0 0
						col Color { color [1 0 0]}
					}
				]}
				Group{ children [ DEF T3 TouchSensor { }	# selector 3
					FrameControlButton {
						pos -0.15 0 0
						col Color { color [0 1 0]}
					}
				]}
				Group{ children [ DEF T4 TouchSensor { }	# selector 4
					FrameControlButton {
						pos -0.05 0 0
						col Color { color [0 0 1]}
					}
				]}
				Group{ children [ DEF T5 TouchSensor { }	# selector 5
					FrameControlButton {
						pos 0.05 0 0
						col Color { color [1 1 0]}
					}
				]}
				Group{ children [ DEF T6 TouchSensor { }	# selector 6
					FrameControlButton {
						pos 0.15 0 0
						col Color { color [1 0 1]}
					}
				]}
				Group{ children [ DEF T7 TouchSensor { }	# selector 7
					FrameControlButton {
						pos 0.25 0 0
						col Color { color [0 1 1]}
					}
				]}
				Group{ children [ DEF T8 TouchSensor { }	# selector 8
					FrameControlButton {
						pos 0.35 0 0
						col Color { color [1 1 1]}
					}
				]}	

			]
		}

# end of  frame color selectors
 
	]}	# end of placement of 2D Panel

# End of 2D Display Panel
##################################################


]}	# end of group containing all elements of 2D Panel (SWITCH: whichChoice 0)


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#
#		3D DISPLAY CUBE
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


Group { children [		# group containing all elements of 3D Cube
					# (SWITCH: whichChoice 1)


##################################################
# Begin of Touch Sensor to Switch to 2D Panel

	Transform { translation 1 -0.14 0.32 children [		# placement

		DEF TO2D TouchSensor { }		# touch sensor

		Shape {					# triangle pointing to the left
			geometry IndexedFaceSet {
				coord Coordinate { point [ -0.06  0.00 0,
								    0.06 -0.06 0,
								    0.06  0.06 0 ] }
				coordIndex [ 0 1 2 -1 ]
				colorPerVertex FALSE
				color Color { color [ 1 1 0 ] }
				colorIndex [ 0 ]
			}
		}

		Shape {					# underlying black triangle
			geometry IndexedFaceSet {
				coord Coordinate { point [ -0.074  0.000 -0.001,
								    0.070 -0.072 -0.001,
								    0.070  0.072 -0.001 ] }
				coordIndex [ 0 1 2 -1 ]
				colorPerVertex FALSE
				color Color { color [ 0 0 0 ] }
				colorIndex [ 0 ]
			}
		}

		Shape {					# invisible face enlarging sensor area
			geometry IndexedFaceSet {
				coord Coordinate { point [ -0.260   0.075 0,
								   -0.260  -0.075 0,
								    0.075  -0.075 0,
								    0.075   0.075 0 ]
				}
				coordIndex [ 0 1 2 3 -1 ]
			}
			appearance Appearance {
				material Material { transparency 1 }
			}
		}

		Transform { translation -0.12 -0.035 0 children [	# label "2D"
			Shape { geometry Text {
				string [ "2D" ]
				fontStyle FontStyle {
					style "BOLD"
					size 0.13
					justify "END"
				}}
				appearance Appearance {
					material Material { diffuseColor 0 0 0 }
				}
			}
		]}
	]} 

# End of Touch Sensor to Switch to 2D Panel
##################################################


##################################################
# Begin of Display Panel on Top

	Transform { translation 0.45 1.24 0  scale 0.6 0.6 1  children [		# placement

		Shape {						# center face with current color
			geometry IndexedFaceSet {
				coord Coordinate { point [ -0.3  0.09 0.32, -0.3 -0.09 0.32,
								    0.3 -0.09 0.32,  0.3  0.09 0.32 ] }
				coordIndex [ 0, 1, 2, 3, -1 ]
				colorPerVertex FALSE
				color DEF DISPLAY2 Color { color [ 0 0 0 ] }
				colorIndex [ 0 ]
			}
		}

		Shape {						# frame with current frame color
			geometry IndexedFaceSet {
				coord Coordinate {point [ -0.35  0.14 0.319, -0.35 -0.14 0.319,
								   0.35 -0.14 0.319,  0.35  0.14 0.319 ]}
				coordIndex [ 0, 1, 2, 3, -1 ]
				colorPerVertex FALSE
				color DEF BACKCOLOR2 Color { color [ 1 1 1 ] }
				colorIndex [ 0 ]
			}
		}
	]}

# End of Display Panel on Top
##################################################


##################################################
# Begin of Color Plane Control Buttons

	Transform { translation -1.01 -0.26 0 children [	# red color plane switch
		DEF RPLTOUCH TouchSensor { }
		DEF INR GPControlButton { fcolor Color { color [1 0 0] } flag -1 }
	]}

	Transform { translation -0.73 -0.26 0 children [	# green color plane switch
		DEF GPLTOUCH TouchSensor { }
		DEF ING GPControlButton { fcolor Color { color [0 1 0] } flag -1 }
	]}

	Transform { translation -0.45 -0.26 0 children [	# blue color plane switch
		DEF BPLTOUCH TouchSensor { }
		DEF INB GPControlButton { fcolor Color { color [0 0 1] } flag -1 }
	]}

	Transform { translation -0.31 -0.26 0  children [	# label
		Shape {
			geometry Text {
				string [ "Color Planes" ]
				fontStyle FontStyle {
					style "BOLD"
					size 0.12
					justify ["BEGIN" "MIDDLE"]
				}
			}
			appearance Appearance {
				material Material { diffuseColor 0 0 0 }
			}
		}
	]}

# End of Color Plane Control Buttons
##################################################


##################################################
# Begin of Reset Cube Control

	Transform { translation 1.14 1.35 0 children [		# placement

		DEF RESET TouchSensor { }				# touch sensor

		Shape { geometry IndexedFaceSet {			# background face
			coord Coordinate {
				point [ -0.1  0.09 -0.001, -0.1 -0.09 -0.001,
					   0.1 -0.09 -0.001,  0.1  0.09 -0.001 ]
			}
			coordIndex [ 0 1 2 3 -1 ]
			colorPerVertex FALSE
			color Color { color [ 0.7 0.7 0.7 ] }
		}}

		Shape {							# label
			geometry Text {
				string [ "Reset" "Cube" ]
				fontStyle FontStyle {
					style "BOLD"
					size 0.08
					justify ["MIDDLE" "MIDDLE"]
				}
			}
			appearance Appearance {
				material Material { diffuseColor 0 0 0 }
			}
		}
	]}

# End of Reset Cube Control
##################################################


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Placement and Rotation of 3D Cube

DEF CUBE Transform {						# overall Cube transform
   rotation 0.479 -0.862 -0.167 0.796
   translation 0.6 0.55 -0.25
   scale 0.82 0.82 0.82
   children [

	DEF ROT SphereSensor { offset 0.479 -0.862 -0.167 0.796}	# SphereSensor to allow
											# for Cube rotation

	Shape { 							# invisble sphere to "grab" Cube
		geometry Sphere {radius 0.8}
		appearance Appearance {
			material Material { transparency 1 }
		}
	}

#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


##################################################
# Begin of Fixed Cube Outline

# Begin of R-axis
	Transform {
		rotation 0 0 1 1.57
		translation 0.05 -0.5 0.5
		children [ Shape {
			appearance DEF RED Appearance {
				material Material { diffuseColor 1 0 0 }
			}
			geometry DEF CYL Cylinder { height 1.19 radius 0.01 }
		}]
	}
	Transform {
		rotation 0 0 1 -1.57
		translation 0.65 -0.5 0.5
		children [ Shape {
			appearance USE RED
			geometry DEF CON Cone { bottomRadius 0.04 height 0.1 }
		}]
	}
# End of R-axis

# Begin of G-axis
	Transform {
		rotation 1 0 0 1.57
		translation -0.5 -0.5 -0.05
		children [ Shape {
			appearance DEF GREEN Appearance {
				material Material { diffuseColor 0 1 0 }
			}
			geometry USE CYL
		}]
	}
	Transform {
		rotation 1 0 0 -1.57
		translation -0.5 -0.5 -0.65
		children [ Shape { appearance USE GREEN geometry USE CON } ]
	}

# End of G-axis

# Begin of B-axis
	Transform {
		translation -0.5 0.05 0.5
		children [ Shape {
			appearance DEF BLUE Appearance {
				material Material { diffuseColor 0 0 1 }
			}
			geometry USE CYL
		}]
	}
	Transform {
		translation -0.5 0.65 0.5
		children [ Shape { appearance USE BLUE geometry USE CON } ]
	}
# End of B-axis

# Begin of Edge Outline
	Shape { geometry IndexedLineSet {
		coord DEF RGBCUBE Coordinate {
			point [  0.5  0.5 -0.5,		# point 0 white
				  -0.5  0.5 -0.5,		# point 1 cyan
				  -0.5  0.5  0.5,		# point 2 blue
				   0.5  0.5  0.5,		# point 3 magenta

				   0.5 -0.5 -0.5,		# point 4 yellow
				  -0.5 -0.5 -0.5,		# point 5 green
				  -0.5 -0.5  0.5,		# point 6 black
				   0.5 -0.5  0.5 ]	# point 7 red

		}
		coordIndex [ 0 1 2 3 0 -1,	# top face edges
				 5 4 7     -1,	# half bottom edges
				 4 0       -1,	# yellow to white
				 5 1       -1,	# green to cyan
				 7 3       -1 ]	# red to magenta
		colorPerVertex FALSE
		color Color { color [ 0 0 0, 0 0 0, 0 0 0, 0 0 0, 0 0 0 ] }
	}}
# End of Edge Outline

# Begin of Origin
	Transform { translation -0.5 -0.5 0.5 children [		# black origin
		Shape {
			appearance DEF BLACK Appearance {
				material Material { diffuseColor 0 0 0 }
			}
			geometry DEF MARK Sphere { radius 0.03}
		}
	]}
# End of Origin

# Begin of other Corners
	Transform { translation 0.5 -0.5 -0.5 children [		# yellow corner
		Shape {
			appearance DEF YELLOW Appearance {
				material Material { diffuseColor 1 1 0 }
			}
			geometry USE MARK
		}
	]}
	Transform { translation -0.5 0.5 -0.5 children [		# cyan corner
		Shape {
			appearance DEF CYAN Appearance {
				material Material { diffuseColor 0 1 1 }
			}
			geometry USE MARK
		}
	]}
	Transform { translation 0.5 0.5 0.5 children [			# magenta corner
		Shape {
			appearance DEF MAGENTA Appearance {
				material Material { diffuseColor 1 0 1 }
			}
			geometry USE MARK
		}
	]}
	Transform { translation 0.5 0.5 -0.5 children [			# white corner
		Shape {
			appearance DEF WHITE Appearance {
				material Material { diffuseColor 1 1 1 }
			}
			geometry USE MARK
		}
	]}			
# End of other Corners

# End of Fixed Cube Outline
##################################################


##################################################
# Begin of Moving Balls

	DEF TRED Transform { translation 0.5 -0.5 0.5 children [	   # moving red ball
		Shape { appearance USE RED  geometry USE MARK }
	]}

	DEF TGREEN Transform { translation -0.5 -0.5 -0.5 children [   # moving green ball
		Shape { appearance USE GREEN  geometry USE MARK }
	]}

	DEF TBLUE Transform { translation -0.5 0.5 0.5 children [	   # moving blue ball
		Shape { appearance USE BLUE  geometry USE MARK }
	]}

	DEF TARGET Transform { translation 0 0 0 children [  # moving target (current color)
		Shape {
			appearance Appearance {
				material DEF TARGETCOL Material { diffuseColor 0 0 0 }
			}
			geometry Sphere { radius 0.06 }
		}
	]}

# End of Moving Balls
##################################################


##################################################
# Begin of Crosshair

	DEF RLINE Transform { children [
		Shape { geometry IndexedLineSet {
			coord Coordinate { point [ -0.5 -0.5 0.5, 0.5 -0.5 0.5 ] }
			coordIndex [ 0 1 ]
			colorPerVertex FALSE
			color Color { color [ 0.8 0 0 ] }			# red
			colorIndex [ 0 ]
		}}
	]}

	DEF GLINE Transform { children [
		Shape { geometry IndexedLineSet {
			coord Coordinate { point [ -0.5 -0.5 0.5, -0.5 -0.5 -0.5 ] }
			coordIndex [ 0 1 ]
			colorPerVertex FALSE
			color Color { color [ 0.13 0.55 0.13 ] }		# green
			colorIndex [ 0 ]
		}}
	]}

	DEF BLINE Transform { children [
		Shape { geometry IndexedLineSet {
			coord Coordinate { point [ -0.5 -0.5 0.5, -0.5 0.5 0.5 ] }
			coordIndex [ 0 1 ]
			colorPerVertex FALSE
			color Color { color [ 0 0 1 ] }			# blue
			colorIndex [ 0 ]
		}}
	]}

# End of Crosshair
##################################################


##################################################
# Begin of Moving Frames

	DEF RFRAME Transform { children [
		Shape { geometry IndexedLineSet {
			coord Coordinate { point [ -0.5 -0.5  0.5,
							   -0.5 -0.5 -0.5,
							   -0.5  0.5 -0.5,
							   -0.5  0.5  0.5 ]}
			coordIndex [ 0 1 2 3 0 -1]
			colorPerVertex FALSE
			color Color { color [ 0.8 0 0 ] }			# red
			colorIndex [ 0 ]
		}}
	]}

	DEF GFRAME Transform { children [
		Shape { geometry IndexedLineSet {
			coord Coordinate { point [ -0.5 -0.5  0.5,
							    0.5 -0.5  0.5,
							    0.5  0.5  0.5,
							   -0.5  0.5  0.5 ]}
			coordIndex [ 0 1 2 3 0 -1]
			colorPerVertex FALSE
			color Color { color [ 0.13 0.55 0.13 ] }		# green
			colorIndex [ 0 ]
		}}
	]}

	DEF BFRAME Transform { children [
		Shape { geometry IndexedLineSet {
			coord Coordinate { point [ -0.5 -0.5  0.5,
							   -0.5 -0.5 -0.5,
							    0.5 -0.5 -0.5,
							    0.5 -0.5  0.5 ]}
			coordIndex [ 0 1 2 3 0 -1]
			colorPerVertex FALSE
			color Color { color [ 0 0 1 ] }			# blue
			colorIndex [ 0 ]
		}}
	]}

# End of Moving Frames
##################################################


##################################################
# Begin of Color Planes

	DEF RSWITCH Switch { whichChoice -1 choice [			# r-plane
		DEF RPLANE Transform { children [
			Shape { geometry IndexedFaceSet {
				coord Coordinate { point [ -0.5 -0.5  0.5,
								   -0.5 -0.5 -0.5,
								   -0.5  0.5 -0.5,
								   -0.5  0.5  0.5 ]}
				coordIndex [ 0 1 2 3 -1 ]
				colorPerVertex TRUE
				color DEF RPCOLOR Color { color [ 0 0 0	# only red is variable
					    				    0 1 0,
					    				    0 1 1,
					    				    0 0 1 ]}
				colorIndex [ 0 1 2 3 -1 ]
				solid FALSE
			}}
		]}
	]}

	DEF GSWITCH Switch { whichChoice -1 choice [			# g-plane
		DEF GPLANE Transform { children [
			Shape { geometry IndexedFaceSet {
				coord Coordinate { point [ -0.5 -0.5  0.5,
								    0.5 -0.5  0.5,
								    0.5  0.5  0.5,
								   -0.5  0.5  0.5 ]}
				coordIndex [ 0 1 2 3 -1 ]
				colorPerVertex TRUE
				color DEF GPCOLOR Color { color [ 0 0 0	# only green is variable
							    		    1 0 0,
							    		    1 0 1,
							    		    0 0 1 ]}
				colorIndex [ 0 1 2 3 -1 ]
				solid FALSE
			}}
		]}
	]}

	DEF BSWITCH Switch { whichChoice -1 choice [			# b-plane
		DEF BPLANE Transform { children [
			Shape { geometry IndexedFaceSet {
				coord Coordinate { point [ -0.5 -0.5  0.5,
								   -0.5 -0.5 -0.5,
								    0.5 -0.5 -0.5,
								    0.5 -0.5  0.5 ]}
				coordIndex [ 0 1 2 3 -1 ]
				colorPerVertex TRUE
				color DEF BPCOLOR Color { color [ 0 0 0	# only blue is variable
					  		  		    0 1 0,
					  		  		    1 1 0,
					  		  		    1 0 0 ]}
				colorIndex [ 0 1 2 3 -1 ]
				solid FALSE
			}}
		]}
	]}

# End of Color Planes
##################################################


##################################################
# Begin of Diagonal

	DEF DIAG Switch { whichChoice -1 choice [
		Shape { geometry IndexedLineSet {
			coord Coordinate { point [ -0.5 -0.5  0.5,
							    0.5  0.5 -0.5 ] }
			coordIndex [ 0 1 ]
			colorPerVertex FALSE
			color Color { color [ 1 1 1 ] }
			colorIndex [ 0 ]
		}}
	]}

# End of Diagonal
##################################################


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# End of Placement and Rotation of 3D Cube
   ]
}
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


]}	# end of group containing all elements of 3D Cube (SWITCH: whichChoice 1)


#*************************************************
#	End of Switch between 2D Panel and 3D Cube
]}
#*************************************************


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#
#		VRML SCIPTS
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


##################################################
# Begin of VRML Script SETCOLOR (main color control)

DEF SETCOLOR Script {

   eventIn   SFVec3f  set_red		# functions: set red/green/blue
   eventIn   SFVec3f  set_green
   eventIn   SFVec3f  set_blue

   eventIn   SFBool   hit_t1		# functions: set frame (background) color
   eventIn   SFBool   hit_t2		#            = selected color ( 1 to 8 )
   eventIn   SFBool   hit_t3
   eventIn   SFBool   hit_t4
   eventIn   SFBool   hit_t5
   eventIn   SFBool   hit_t6
   eventIn   SFBool   hit_t7
   eventIn   SFBool   hit_t8

   eventIn   SFBool   get_me		# function: set frame color = current color

   eventIn   SFTime   grayTime	# function: activate/deactivate gray lock

   eventIn   SFTime   sky_time	# function: toggle sky color

   eventOut  SFVec3f  r_move		# positions: red/green/blue slider
   eventOut  SFVec3f  g_move
   eventOut  SFVec3f  b_move

   eventOut  SFVec3f  t_rline		# positions: red/green/blue crosshair
   eventOut  SFVec3f  t_gline
   eventOut  SFVec3f  t_bline

   eventOut  SFVec3f  r_frame		# positions: red/green/blue frame & plane
   eventOut  SFVec3f  g_frame
   eventOut  SFVec3f  b_frame

   eventOut  MFColor  rp_color	# colors per vertex: red/green/blue color plane
   eventOut  MFColor  gp_color
   eventOut  MFColor  bp_color

   eventOut  SFBool   grayLock	# disable green/blue slider if gray lock active
   eventOut  SFInt32  gray_choice	# gray lock display choice

   eventOut  MFColor  new_color	# current color (as MFColor)
   eventOut  MFColor  back_col	# current frame (background) color
   eventOut  MFColor  new_sky		# new sky color

   eventOut  SFVec3f  rmove		# positions: ball on red/green/blue axis
   eventOut  SFVec3f  gmove
   eventOut  SFVec3f  bmove

   eventOut  SFVec3f  target_move	# position: center-ball (with current color)
   eventOut  SFColor  target_col	# color: center-ball = current color as SFColor
   
   field     SFInt32  grayCounter -1	# save gray lock status
   field     SFInt32  skyCounter   1	# toggle for sky color
   field     SFColor  save_color 0 0 0	# save current color
   field     SFFloat  vtemp        0	# temporary variable
   field     SFVec3f  vectemp    0 0 0	# temporary SFVec3f

   url "vrmlscript:

	function initialize ( ) {

		new_color = new MFColor ();
		back_col  = new MFColor ();
		rp_color  = new MFColor ();
		gp_color  = new MFColor ();
		bp_color  = new MFColor ();
		new_sky   = new MFColor ();

		new_color [0] = new SFColor (0,0,0);
		back_col  [0] = new SFColor (1,1,1);

		rp_color  [0] = new SFColor (0,0,0);
		rp_color  [1] = new SFColor (0,1,0);
		rp_color  [2] = new SFColor (0,1,1);
		rp_color  [3] = new SFColor (0,0,1);

		gp_color  [0] = new SFColor (0,0,0);
		gp_color  [1] = new SFColor (1,0,0);
		gp_color  [2] = new SFColor (1,0,1);
		gp_color  [3] = new SFColor (0,0,1);

		bp_color  [0] = new SFColor (0,0,0);
		bp_color  [1] = new SFColor (0,1,0);
		bp_color  [2] = new SFColor (1,1,0);
		bp_color  [3] = new SFColor (1,0,0);
		
		r_move  = new SFVec3f (0,0,0);
		g_move  = new SFVec3f (0,0,0);
		b_move  = new SFVec3f (0,0,0);
		t_rline = new SFVec3f (0,0,0);
		t_gline = new SFVec3f (0,0,0);
		t_bline = new SFVec3f (0,0,0);
		r_frame = new SFVec3f (0,0,0);
		g_frame = new SFVec3f (0,0,0);
		b_frame = new SFVec3f (0,0,0);

		rmove = new SFVec3f (-0.5, -0.5,  0.5);
		gmove = new SFVec3f (-0.5, -0.5,  0.5);
		bmove = new SFVec3f (-0.5, -0.5,  0.5);

		new_sky [0] = new SFColor (0.5, 0.6, 1.0); 

		target_move = new SFVec3f (-0.5, -0.5,  0.5);
		target_col = new SFColor (0,0,0);

		grayLock = TRUE;
		gray_choice = -1;
	}

	function set_green (value) {
		vtemp = value.y;
		new_color [0][1] = vtemp;
		save_color.g = vtemp;
		g_move.y = vtemp;
		gmove.z = 0.5 - vtemp;
		target_move.z = 0.5 - vtemp;
		target_col = save_color;
		t_rline.z = - vtemp;
		t_bline.z = - vtemp;
		g_frame.z = - vtemp;
		gp_color [0][1] = vtemp;
		gp_color [1][1] = vtemp;
		gp_color [2][1] = vtemp;
		gp_color [3][1] = vtemp;
	}

	function set_blue (value) {
		vtemp = value.y;
		new_color [0][2] = vtemp;
		save_color.b = vtemp;
		b_move.y = vtemp;
		bmove.y = vtemp - 0.5;
		target_move.y = vtemp - 0.5;
		target_col = save_color;
		t_rline.y = vtemp;
		t_gline.y = vtemp;
		b_frame.y = vtemp;
		bp_color [0][2] = vtemp;
		bp_color [1][2] = vtemp;
		bp_color [2][2] = vtemp;
		bp_color [3][2] = vtemp;
	}

	function set_red (value) {
		vtemp = value.y;
		new_color [0][0] = vtemp;
		save_color.r = vtemp;
		r_move.y = vtemp;
		rmove.x = vtemp - 0.5;
		target_move.x = vtemp - 0.5;
		target_col = save_color;
		t_bline.x = vtemp;
		t_gline.x = vtemp;
		r_frame.x = vtemp;
		rp_color [0][0] = vtemp;
		rp_color [1][0] = vtemp;
		rp_color [2][0] = vtemp;
		rp_color [3][0] = vtemp;
		if (grayCounter == 0) set_green (value),
					    set_blue  (value);
	}

	function get_me (value) {
		if (value == TRUE)
		back_col [0] = save_color;
	}

	function grayTime (value, time) {

		if  (grayCounter == -1) grayCounter = 0;
		else grayCounter = -1;

		if (grayCounter ==  0) grayLock = FALSE,
					     save_color.g = save_color.r,
					     save_color.b = save_color.r,
					     vectemp = new SFVec3f ( save_color.r,
									     save_color.g,
									     save_color.b ),
					     set_green (vectemp),
					     set_blue  (vectemp);

		if (grayCounter == -1) grayLock = TRUE;

		gray_choice = grayCounter;
	}

	function hit_t1 (value) {
		if (value == TRUE)
		back_col [0] = new SFColor (0,0,0);
	}
	function hit_t2 (value) {
		if (value == TRUE)
		back_col [0] = new SFColor (1,0,0);
	}
	function hit_t3 (value) {
		if (value == TRUE)
		back_col [0] = new SFColor (0,1,0);
	}
	function hit_t4 (value) {
		if (value == TRUE)
		back_col [0] = new SFColor (0,0,1);
	}
	function hit_t5 (value) {
		if (value == TRUE)
		back_col [0] = new SFColor (1,1,0);
	}
	function hit_t6 (value) {
		if (value == TRUE)
		back_col [0] = new SFColor (1,0,1);
	}
	function hit_t7 (value) {
		if (value == TRUE)
		back_col [0] = new SFColor (0,1,1);
	}
	function hit_t8 (value) {
		if (value == TRUE)
		back_col [0] = new SFColor (1,1,1);
	}

	function sky_time (value, time) {
		skyCounter = skyCounter + 1;
		if (skyCounter >= 2) skyCounter = 0;

		if (skyCounter == 0) new_sky [0] = save_color;
		if (skyCounter == 1) new_sky [0] = new SFColor (0.5, 0.6, 1.0); 
	}

   "
}

# End of VRML Script SETCOLOR
##################################################


##################################################
# Begin of VRML Script LABEL (numerical labels for sliders)

DEF LABEL Script {
   eventIn   SFVec3f   set_red
   eventOut  MFString  red_label
   eventIn   SFVec3f   set_green
   eventOut  MFString  green_label
   eventIn   SFVec3f   set_blue
   eventOut  MFString  blue_label

   field     SFInt32   digits 3
   field     SFFloat   trimFactor 100

   url "vrmlscript:

	function initialize ( ) {
		trimFactor = Math.pow(10, digits);
	}

	function trim(value) {
		return Math.round (value * trimFactor) / trimFactor;
	}

	function set_red (value) {
		red_label [0] = trim(value.y);
	}

	function set_green (value) {
		green_label [0] = trim(value.y);
	}

	function set_blue (value) {
		blue_label [0] = trim(value.y);
	}

   "
}

# End of VRML Script LABEL
##################################################


##################################################
# Begin VRML Script SWITCHME (switch between 2D and 3D)

DEF SWITCHME Script {
   eventIn  SFTime  switchTime1
   eventIn  SFTime  switchTime2
   eventOut SFInt32 new_choice

   url "vrmlscript:

	function initialize ( ) {
		new_choice = 0;
	}

	function switchTime1 (value,time) {
		new_choice = 0;
	}

	function switchTime2 (value,time) {
		new_choice = 1;
	}
   "
}

# End of VRML Script SWITCHME
##################################################


##################################################
# Begin of VRML Script PLANECONTROL (color plane control toogles)

DEF PLANECONTROL Script {
   eventIn  SFTime  rswitch
   eventIn  SFTime  gswitch
   eventIn  SFTime  bswitch

   eventOut SFInt32 rchoice
   eventOut SFInt32 gchoice
   eventOut SFInt32 bchoice

   field    SFInt32 rsave -1
   field    SFInt32 gsave -1
   field    SFInt32 bsave -1

   url "vrmlscript:

	function initialize ( ) {
		rchoice = -1;
		gchoice = -1;
		bchoice = -1;
		rsave = -1;
		gsave = -1;
		bsave = -1;
	}

	function rswitch (value,time) {
		if (rsave == -1) rsave =0;
		else rsave = -1;
		rchoice = rsave;
	}

	function gswitch (value,time) {
		if (gsave == -1) gsave =0;
		else gsave = -1;
		gchoice = gsave;
	}

	function bswitch (value,time) {
		if (bsave == -1) bsave =0;
		else bsave = -1;
		bchoice = bsave;
	}
   "
}

# End of VRML Script PLANECONTROL
##################################################


##################################################
# Begin of VRML Script RESETCUBE (reset initial Cube rotation)

DEF RESETCUBE Script {
   eventIn  SFBool      reset
   eventOut SFRotation  org_rotation

   field    SFRotation  init_rotation  0.479 -0.862 -0.167 0.796 

   url "vrmlscript:

	function reset (value,time) {
		if (value == TRUE) 
		org_rotation = init_rotation;
	}

   "

}

# End of VRML Script RESETCUBE
##################################################


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#
#		ROUTING STATEMENTS
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


##################################################
# Begin of Routing Statements

# Routing for slider movements
ROUTE RSENSOR.translation_changed TO SETCOLOR.set_red
ROUTE GSENSOR.translation_changed TO SETCOLOR.set_green
ROUTE BSENSOR.translation_changed TO SETCOLOR.set_blue
ROUTE SETCOLOR.r_move TO RMOVE.translation
ROUTE SETCOLOR.g_move TO GMOVE.translation
ROUTE SETCOLOR.b_move TO BMOVE.translation
ROUTE SETCOLOR.new_color TO DISPLAY.color
ROUTE SETCOLOR.new_color TO DISPLAY2.color

# Routing for frame color in 2D Panel
ROUTE T1.isActive TO SETCOLOR.hit_t1
ROUTE T2.isActive TO SETCOLOR.hit_t2
ROUTE T3.isActive TO SETCOLOR.hit_t3
ROUTE T4.isActive TO SETCOLOR.hit_t4
ROUTE T5.isActive TO SETCOLOR.hit_t5
ROUTE T6.isActive TO SETCOLOR.hit_t6
ROUTE T7.isActive TO SETCOLOR.hit_t7
ROUTE T8.isActive TO SETCOLOR.hit_t8
ROUTE TD.isActive TO SETCOLOR.get_me
ROUTE SETCOLOR.back_col TO BACKCOLOR.color
ROUTE SETCOLOR.back_col TO BACKCOLOR2.color

# Routing for slider labels
ROUTE RMOVE.translation TO LABEL.set_red
ROUTE LABEL.red_label TO RTXT.set_string
ROUTE GMOVE.translation TO LABEL.set_green
ROUTE LABEL.green_label TO GTXT.set_string
ROUTE BMOVE.translation TO LABEL.set_blue
ROUTE LABEL.blue_label TO BTXT.set_string

# Routing for 3D Cube update (moving balls)
ROUTE SETCOLOR.rmove TO TRED.translation
ROUTE SETCOLOR.gmove TO TGREEN.translation
ROUTE SETCOLOR.bmove TO TBLUE.translation
ROUTE SETCOLOR.target_move TO TARGET.translation
ROUTE SETCOLOR.target_col TO TARGETCOL.diffuseColor

# Routing for 3D Cube Crosshair
ROUTE SETCOLOR.t_rline TO RLINE.translation
ROUTE SETCOLOR.t_gline TO GLINE.translation
ROUTE SETCOLOR.t_bline TO BLINE.translation

# Routing for 3D Cube Frames
ROUTE SETCOLOR.r_frame TO RFRAME.translation
ROUTE SETCOLOR.g_frame TO GFRAME.translation
ROUTE SETCOLOR.b_frame TO BFRAME.translation

# Routing for 3D Cube Color Planes
ROUTE SETCOLOR.r_frame TO RPLANE.translation
ROUTE SETCOLOR.rp_color TO RPCOLOR.color
ROUTE SETCOLOR.g_frame TO GPLANE.translation
ROUTE SETCOLOR.gp_color TO GPCOLOR.color
ROUTE SETCOLOR.b_frame TO BPLANE.translation
ROUTE SETCOLOR.bp_color TO BPCOLOR.color

# Routing for 3D Cube Color Planes on/off
ROUTE RPLTOUCH.touchTime TO PLANECONTROL.rswitch
ROUTE PLANECONTROL.rchoice TO RSWITCH.whichChoice
ROUTE PLANECONTROL.rchoice TO INR.flag
ROUTE GPLTOUCH.touchTime TO PLANECONTROL.gswitch
ROUTE PLANECONTROL.gchoice TO GSWITCH.whichChoice
ROUTE PLANECONTROL.gchoice TO ING.flag
ROUTE BPLTOUCH.touchTime TO PLANECONTROL.bswitch
ROUTE PLANECONTROL.bchoice TO BSWITCH.whichChoice
ROUTE PLANECONTROL.bchoice TO INB.flag

# Routing for 3D Cube rotation
ROUTE ROT.rotation_changed TO CUBE.set_rotation
ROUTE RESET.isActive TO RESETCUBE.reset
ROUTE RESETCUBE.org_rotation TO CUBE.set_rotation
ROUTE RESETCUBE.org_rotation TO ROT.offset

# Routing for switch between 2D Panel and 3D Cube
ROUTE TO2D.touchTime TO SWITCHME.switchTime1
ROUTE TO3D.touchTime TO SWITCHME.switchTime2
ROUTE SWITCHME.new_choice TO SWITCH.whichChoice

# Routing for gray lock on/off
ROUTE LOCKTOUCH.touchTime TO SETCOLOR.grayTime
ROUTE SETCOLOR.gray_choice TO LOCKSWITCH.whichChoice
ROUTE SETCOLOR.gray_choice TO INDIC.flag

# Routing for gray lock operation
ROUTE SETCOLOR.gray_choice TO DIAG.whichChoice
ROUTE SETCOLOR.grayLock TO GSENSOR.enabled
ROUTE SETCOLOR.grayLock TO BSENSOR.enabled
ROUTE SETCOLOR.g_move TO GSENSOR.offset
ROUTE SETCOLOR.b_move TO BSENSOR.offset

# Routing for sky color toggle
ROUTE SETSKY.touchTime TO SETCOLOR.sky_time
ROUTE SETCOLOR.new_sky TO SKY.skyColor 

# End of Routing Statements
##################################################



