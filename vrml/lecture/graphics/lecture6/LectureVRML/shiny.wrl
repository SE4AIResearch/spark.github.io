#VRML V2.0 utf8

# Eng 477 Illustration: Shiny Materials
# K.-P. Beier, University of Michigan
# Last Update: November 11, 2002


NavigationInfo { type ["EXAMINE" "ANY"] }

DirectionalLight { ambientIntensity 0.4 direction 1 -1 0 }


############################################################
# Begin of Prototype MySphere
#
# This prototype creates a sphere of radius 'rad' with a variable
# number of polygons controlled by 'numLat' (number of latitude
# circles) and 'numLng' (number of longitude circles). The sphere
# is centered around (0,0,0).
#
# The sphere is generated as an IndexedFaceSet node by defining
# the fields coord, coordIndex, texCoord, and creaseAngle.
#
# Adapted from Carey, Bell: "The Annotated VRML 2.0 Reference
# Manual," Addison-Wesley, 1997, pp. 286-287.
# by K.-P. Beier, University of Michigan, January 27, 2002

PROTO MySphere [
        field SFFloat rad    1  # radius of sphere
        field SFInt32 numLat 4  # number of longitudes (parallel to equator)
        field SFInt32 numLng 4  # number of latitudes  (passing through poles)
        field SFFloat cra  3.14 # crease angle 
]{
DEF IFS IndexedFaceSet {
        coord DEF C Coordinate { }
        texCoord DEF TC TextureCoordinate { }
        creaseAngle IS cra
}
DEF S Script {
        field SFFloat rad IS rad
        field SFInt32 numLat IS numLat
        field SFInt32 numLng IS numLng
        eventOut MFVec3f c_changed
        eventOut MFVec2f t_changed
        eventOut MFInt32 ci_changed
        url "vrmlscript:
                function initialize () {
                        var r, angle, x, y, z;
                        var i, j, polyIndex;
                        for (i = 0; i < numLat; i++) {
                           angle = i * ( Math.PI / (numLat-1) ) - ( 0.5 * Math.PI );
                           y = Math.sin(angle);
                           r = rad * Math.sqrt ( 1 - y*y );
                           y = y * rad;
                           for (j = 0; j < numLng; j++) {
                                angle = 2 * Math.PI * j / numLng;
                                x = -Math.sin(angle) * r;
                                z = -Math.cos(angle) * r;
                                c_changed [i*numLng+j] = new SFVec3f (x,y,z);
                                t_changed [i*numLng+j] = new SFVec2f (j/numLng, i/(numLat-1));
                           }
                        }
                        for (i = 0; i < numLat-1; i++) {
                           for (j = 0; j < numLng; j++) {
                                polyIndex = 5 *( i * numLng + j );
                                ci_changed [polyIndex+0] = i * numLng + j;
                                ci_changed [polyIndex+1] = i * numLng + (j+1)%numLng;
                                ci_changed [polyIndex+2] = (i+1) * numLng + (j+1)%numLng;
                                ci_changed [polyIndex+3] = (i+1) * numLng + j;
                                ci_changed [polyIndex+4] = -1;
                           }
                        }
                }
        "
}
ROUTE S.c_changed TO C.point
ROUTE S.t_changed TO TC.set_point
ROUTE S.ci_changed TO IFS.set_coordIndex
}
# End of Prototype MySphere
############################################################


##################################################
# Begin of Scene

DEF SPINME Transform { children [

# GOLD
	Transform {translation -3.6 0 0 children [ Shape {
		appearance Appearance {
			material Material {
				ambientIntensity 0.4
				diffuseColor 0.22, 0.15, 0.00
				specularColor 0.71, 0.70, 0.56
				shininess 0.16
			}
		}
		geometry MySphere {rad 1 numLat 35 numLng 35 cra 1}
	}]}

# METALLIC RED
	Transform {translation -1.2 0 0 children [ Shape {
		appearance Appearance {
			material Material {
				ambientIntensity 0.15
				diffuseColor 0.27, 0.00, 0.00
				specularColor 0.61, 0.13, 0.18
				shininess 0.20
			}
		}
		geometry MySphere {rad 1 numLat 35 numLng 35 cra 1}
	}]}

# COPPER
	Transform {translation 1.2 0 0 children [ Shape {
		appearance Appearance {
			material Material {
				ambientIntensity 0.26
				diffuseColor 0.30, 0.11, 0.00
				specularColor 0.75, 0.33, 0.00
				shininess 0.08
			}
		}
		geometry MySphere {rad 1 numLat 35 numLng 35 cra 1}
	}]}

# ALUMINUM
	Transform {translation 3.6 0 0 children [ Shape {
		appearance Appearance {
			material Material {
				ambientIntensity 0.30
				diffuseColor 0.30, 0.30, 0.50
				specularColor 0.70, 0.70, 0.80
				shininess 0.10
			}
		}
		geometry MySphere {rad 1 numLat 35 numLng 35 cra 1}
	}]}

]}

# End of Scene
##################################################


##################################################
# Begin of Interpolator and Timer

DEF SPIN OrientationInterpolator {
	key	   [ 0 0.25 0.5 0.75 1 ]
	keyValue [ 0 1 0 0,
		     0 1 0 -1.57,
		     0 1 0 -3.14,
		     0 1 0 -4.71,
		     0 1 0 0 ]
}

DEF TIME TimeSensor {
	loop TRUE
	cycleInterval 10
}

# End of Interpolator and Timer
################################################## 


##################################################
# Routing Statements for Spin

ROUTE TIME.fraction_changed TO SPIN.set_fraction
ROUTE SPIN.value_changed TO SPINME.set_rotation
